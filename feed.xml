<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>In Lehman&#39;s Terms</title>
    <description>The technical blog of Jonathan Lehman.</description>
    <link>http://inlehmansterms.net</link>
    <atom:link href="http://inlehmansterms.net/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Modern JavaScript in Rails</title>
        <description>&lt;p&gt;Over the past year, JavaScript has matured quite a bit with the &lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;latest additions&lt;/a&gt; to the spec in ES2015/ES6. With these improvements, JS tooling has also benefited and tools like &lt;a href=&quot;https://babeljs.io/&quot;&gt;&lt;code&gt;babel&lt;/code&gt;&lt;/a&gt; allow developers begin writing ES2015, even before browsers fully support it. Meanwhile, Ruby on Rails, where &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; is still the de facto frontend language, has been slow to acknowledge and utilize these improvements. Rather than waiting on Rails, how can we get access to these new JS features today?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;There are several strategies for adding modern JavaScript tooling to the Rails stack, with each technique somewhere on the spectrum of following the &amp;quot;Rails way&amp;quot; to completely removing sprockets and the asset pipeline from the process in favor of tools like &lt;a href=&quot;https://webpack.github.io/&quot;&gt;&lt;code&gt;webpack&lt;/code&gt;&lt;/a&gt; from the JS community. While, I highly recommend &lt;code&gt;webpack&lt;/code&gt; as a build tool, this article will focus on incorporating new JS tooling while still utilizing sprockets and the asset pipeline. This will be the path of least resistance and probably the easiest way to get ES2015 support into Rails, but I encourage you to play with these tools and find the solution that works BEST for your use case.&lt;/p&gt;

&lt;h2 id=&quot;adding-support-for-es2015-es6&quot;&gt;Adding Support for ES2015/ES6&lt;/h2&gt;

&lt;p&gt;For those of you that like to speed ahead, I have tried to include most of the steps as bullets with the surrounding text providing details and context.&lt;/p&gt;

&lt;p&gt;You can also check out the example repository on &lt;a href=&quot;https://github.com/jdlehman/modern-js-rails-example&quot;&gt;Github&lt;/a&gt; and step through my commits.&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;First we will need the &lt;a href=&quot;https://github.com/browserify-rails/browserify-rails&quot;&gt;&lt;code&gt;browserify-rails&lt;/code&gt;&lt;/a&gt; gem in conjunction with &lt;a href=&quot;https://babeljs.io/&quot;&gt;&lt;code&gt;babel&lt;/code&gt;&lt;/a&gt;. Other gems exist to add ES2015 support to the asset pipeline, but most do not support modules or require additional setup to get modules working. We will use &lt;code&gt;browserify&lt;/code&gt; as it will give us module support and provides an easy means of adding plugins like &lt;code&gt;babel&lt;/code&gt; to handle compiling our ES2015 JS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;gem &amp;#39;browserify-rails&amp;#39;&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt; to install it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;browserify-rails&lt;/code&gt; hooks into the asset pipeline, but shells out to &lt;code&gt;browserify&lt;/code&gt; to handle the actual transformation of our JS. This is how Rails&amp;#39; default CoffeeScript support also works. As you may have guessed, this means we also need &lt;code&gt;browserify&lt;/code&gt;. We are going to use &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; to manage our JS dependencies. One advantage of this is that we will also be able to use our new JS module support from &lt;code&gt;browserify&lt;/code&gt; to import node modules for use in our app. Say goodbye to vendored JS assets that are hard to maintain and update!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;npm init&lt;/code&gt;. This will create your &lt;code&gt;package.json&lt;/code&gt; file that manages your JS dependencies. Think of it like the JS equivalent of your Ruby &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have our file, lets install the dependencies we will need.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;npm install --save browserify browserify-incremental babelify babel-preset-es2015&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will install these dependencies to the &lt;code&gt;node_modules&lt;/code&gt; folder. You should add this folder to your &lt;code&gt;.gitignore&lt;/code&gt; so that you do not check in these dependencies to source control. You will have to run &lt;code&gt;npm install&lt;/code&gt; (similar to &lt;code&gt;bundle install&lt;/code&gt;) if you pull down this repo on another machine or update the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;babelify&lt;/code&gt; is a &lt;code&gt;browserify&lt;/code&gt; plugin to transform our ES2015 code to browser compliant ES5, and &lt;code&gt;babel-preset-es2015&lt;/code&gt; is a &lt;code&gt;babel&lt;/code&gt; plugin. You can also add other &lt;code&gt;browserify&lt;/code&gt; or &lt;code&gt;babel&lt;/code&gt; plugins for even more functionality, but we will concentrate on getting our minimal setup working.&lt;/p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s create a &lt;code&gt;browserify&lt;/code&gt; folder inside of &lt;code&gt;app/assets/javascripts&lt;/code&gt;. This will be the folder where all of our ES2015 JS will live. Having this folder makes it easy to see what JS files support ES2015 and modules. This isolation also means that our setup won&amp;#39;t affect any of our existing JS files, so there is nothing to port (at least right away). You can gradually port existing JS (or CoffeeScript) to ES2015 JS by converting and moving files to the &lt;code&gt;browserify&lt;/code&gt; folder. Once everything is in the &lt;code&gt;browserify&lt;/code&gt; folder, you will no longer need the &lt;code&gt;browserify&lt;/code&gt; folder and can point &lt;code&gt;browserify&lt;/code&gt; to compile the &lt;code&gt;javascripts&lt;/code&gt; folder instead. Speaking of which, let&amp;#39;s look at how we configure &lt;code&gt;browserify-rails&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside of &lt;code&gt;config/application.rb&lt;/code&gt;, let&amp;#39;s add the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# here you can configure the command run by browserify&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# you can add other babel plugins by installing them and including them in the array with es2015&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;browserify_rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commandline_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;-t [ babelify --presets [ es2015 ] ]&#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# this will turn on sourcemaps for development RAILS_ENV&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;browserify_rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_map_environments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;development&#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# this tells browserify what paths/files it needs to be concerned with&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# we will just use node_modules and the browserify folder we just created&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;browserify_rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;node_modules&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;app/assets/javascripts/browserify&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is all of the setup we will need to get ES2015 support. Now we can see how we can begin leveraging our new super powers.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Thanks to our previous setup steps, we can now write ES2015 JS in our &lt;code&gt;browserify&lt;/code&gt; folder (or whatever folders you have browserify watching).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascripts/browserify/dog.js&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;WOOF!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also make use of ES2015 modules. This let&amp;#39;s us explicitly &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; our dependencies, meaning we will no longer have to rely on script order or magic globals that we assume (and hope) are already defined.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascripts/browserify/logger.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;./dog&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, we can require these files into our top level sprockets manifests (browswerify will already have compiled them).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// app/assets/javascripts/application.js&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//= require &#39;browserify/logger&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on the above code, pages that include &lt;code&gt;application.js&lt;/code&gt; will print &lt;code&gt;WOOF!&lt;/code&gt; to the console. Note that this is a trivial example and you can build much more complex functionality in ES2015.&lt;/p&gt;

&lt;p&gt;An added benefit of this setup is that you can &lt;code&gt;import&lt;/code&gt; modules that you have installed with &lt;code&gt;npm&lt;/code&gt;. Say goodbye to vendoring JS assets!&lt;/p&gt;

&lt;h2 id=&quot;linting&quot;&gt;Linting&lt;/h2&gt;

&lt;p&gt;Having already set up a modern JS build system in our Rails app, we can begin to focus on other tools to help our productivity. We will use &lt;a href=&quot;http://eslint.org/&quot;&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/a&gt; to lint our JavaScript. Linting is useful to help us find potential errors and to keep our code style consistent. I highly recommend getting a plugin for your editor that will visualize the &lt;code&gt;eslint&lt;/code&gt; violations.&lt;/p&gt;

&lt;p&gt;First we need to install the linting plugins we will need.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install --save eslint babel-eslint&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we need to set up our &lt;code&gt;eslint&lt;/code&gt; configuration, which lives in &lt;code&gt;.eslintrc.js&lt;/code&gt;. You can check out the &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring&quot;&gt;docs&lt;/a&gt; to help you configure your rules. Check out the &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;airbnb style guide&lt;/a&gt; for a popular JS style guide.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// .eslintrc.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;ecmaFeatures&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;experimentalObjectRestSpread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&quot;parser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;babel-eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;es6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;s2&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;accessor-pairs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;arrow-spacing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;block-spacing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;always&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also create a script in our &lt;code&gt;package.json&lt;/code&gt; file so that it will lint for us when we call &lt;code&gt;npm run lint&lt;/code&gt; in the console.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;package.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$(npm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bin)/eslint&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;./app/assets/javascripts/browserify&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
  }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This linting setup will help ensure that typos and errors do not make their way to production. You might want to make sure there are no linting errors before committing code. It is easy to include this in a continuous integration setup and prevent deploys when linting or tests fail. Speaking of testing...&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;We are almost done! Let&amp;#39;s get some ES2015 JS testing in place and take advantage of being able to import and test specific modules. First, we will install &lt;a href=&quot;https://mochajs.org/&quot;&gt;&lt;code&gt;mocha&lt;/code&gt;&lt;/a&gt; as our test runner and &lt;a href=&quot;https://github.com/mjackson/expect&quot;&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/a&gt; as our assertion library. I am using these libraries as an example, you can easily use others based on your preference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install --save mocha expect babel-core&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can create a &lt;code&gt;test/javascripts&lt;/code&gt; folder to put our JS tests in. Before we actually set up our tests, let&amp;#39;s make sure we are linting our tests by reconfiguring our &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;package.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint:src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(npm bin)/eslint ./app/assets/javascripts/browserify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint:test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$(npm bin)/eslint ./test/javascripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;npm run lint:src &amp;amp;&amp;amp; npm run lint:test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;npm run lint&lt;/code&gt; will lint our source and test JavaScript files. While we are still in our package file, let&amp;#39;s set up our test script so we can use &lt;code&gt;npm test&lt;/code&gt; to run our JavaScript tests.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;package.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NODE_PATH=$NODE_PATH:$PWD/test/javascripts:$PWD/app/assets/javascripts/browserify $(npm bin)/mocha -R dot --compilers js:babel-core/register --recursive ./test/javascripts&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will notice the long bit modifying the &lt;code&gt;NODE_PATH&lt;/code&gt;. This will allow us to import as if our &lt;code&gt;browserify&lt;/code&gt; folder is our current folder. Essentially we are adding the &lt;code&gt;browserify&lt;/code&gt; folder to the paths we use to resolve JS imports. This will make imports less verbose in our tests.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s begin leveraging these tools and write a simple test for our &lt;code&gt;Dog&lt;/code&gt; class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;expect&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;dog&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Dog&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#bark should return WOOF!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;WOOF!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you try to run the tests now, you will get some errors. There is one last thing we need to set up, our Babel config in &lt;code&gt;.babelrc&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.babelrc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you are all set to start writing ES2015 JS in your Rails app! Let me know how it worked out for you.&lt;/p&gt;

&lt;h2 id=&quot;heroku&quot;&gt;Heroku&lt;/h2&gt;

&lt;p&gt;When deploying to &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;, make sure to include the nodejs build pack BEFORE your Ruby buildpack. All your node dependencies will need to be installed before the assets are precompiled. See the docs for more on &lt;a href=&quot;https://devcenter.heroku.com/articles/buildpacks&quot;&gt;configuring buildpacks&lt;/a&gt;. You will also want to make sure you specify the version of node and npm you want to use on Heroku. You can do this with the &lt;code&gt;engines&lt;/code&gt; config in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;package.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;engines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5.10.x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.8.x&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;using-react&quot;&gt;Using React&lt;/h2&gt;

&lt;p&gt;Adding &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; to this configuration is also pretty simple. First, you need to install your new dependencies. Other than React and ReactDOM we will pull down the &lt;code&gt;babel&lt;/code&gt; preset for React, which will compile the JSX for us, the &lt;code&gt;eslint&lt;/code&gt; React plugin, which will gives us more &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;rules&lt;/a&gt; we can use for our React components, and finally &lt;a href=&quot;http://airbnb.io/enzyme/&quot;&gt;&lt;code&gt;enzyme&lt;/code&gt;&lt;/a&gt;, a nice testing library for React from airbnb.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install --save react react-dom babel-preset-react enzyme eslint-plugin-react&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we need to set up our React &lt;code&gt;babel&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.babelrc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;browserify_rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;commandline_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;-t [ babelify --presets [ es2015 react ] ]&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now you are all set to create some React components!&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2016/04/29/modern-javascript-in-rails/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2016/04/29/modern-javascript-in-rails/</guid>
      </item>
    
      <item>
        <title>Exploring File Changes Over Time</title>
        <description>&lt;p&gt;Recently I needed to track down when a particular piece of logic changed in a file. I couldn&amp;#39;t remember the date that it changed or any relevant information that might help me find the commit in which it changed. Luckily, git (and GitHub) provide tooling that helped me find what I was looking for.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;using-git&quot;&gt;Using Git&lt;/h2&gt;

&lt;p&gt;Git itself provides functionality to chronologically view commits that have occurred on a particular file or directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git log --follow -p -- pathToFileOrDirectory

&lt;span class=&quot;c&quot;&gt;# examples&lt;/span&gt;
git log --follow -p -- src/helpers
git log --follow -p -- src/helpers/helper1.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you prefer a GUI utility, you can also use &lt;code&gt;gitk&lt;/code&gt; to accomplish the same thing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;gitk pathToFileOrDirectory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;using-github&quot;&gt;Using GitHub&lt;/h2&gt;

&lt;p&gt;If you happen to host your code on &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;, you can also view the commits on a file or directory over time in their web interface.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;code&gt;https://github.com/USER/REPO/commits/BRANCH_OR_SHA/PATH&lt;/code&gt; where the &lt;code&gt;PATH_TO_FILE_OR_DIRECTORY&lt;/code&gt; is optional.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jdlehman/switcheroo/commits/master/src/index.js&quot;&gt;https://github.com/jdlehman/switcheroo/commits/master/src/index.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jdlehman/switcheroo/commits/9d97f19/src/index.js&quot;&gt;https://github.com/jdlehman/switcheroo/commits/9d97f19/src&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jdlehman/switcheroo/commits/master&quot;&gt;https://github.com/jdlehman/switcheroo/commits/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 30 Mar 2016 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2016/03/30/exploring-file-changes-over-time/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2016/03/30/exploring-file-changes-over-time/</guid>
      </item>
    
      <item>
        <title>Recover a dropped Git stash</title>
        <description>&lt;p&gt;Have you ever accidentally drop something from your stash in Git? Luckily it is not actually gone forever. There are a couple strategies for getting it back.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;from-commit-hash&quot;&gt;From Commit Hash&lt;/h2&gt;

&lt;p&gt;Whenever you drop something from your stash, it will confirm you dropped it and print the commit hash.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git stash drop
Dropped refs/stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;666d927cfc3062887b45eb8cb63b121b5ae68c8e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have not closed your terminal yet you should be able to find the hash in your history and use it to get back to your lost commit.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# apply dangling commit&lt;/span&gt;
git stash apply 666d927cfc3062887b45eb8cb63b121b5ae68c8e

&lt;span class=&quot;c&quot;&gt;# or just check it out&lt;/span&gt;
git checkout 666d927cfc3062887b45eb8cb63b121b5ae68c8e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;file-system-consistency-check&quot;&gt;File System Consistency Check&lt;/h2&gt;

&lt;p&gt;If you have already closed your terminal or cannot find the lost commit&amp;#39;s hash, you can use &lt;code&gt;git fsck&lt;/code&gt;. &lt;code&gt;git fsck&lt;/code&gt; (file system consistency check) is a tool to verify the connectivity and validity of objects in git&amp;#39;s database. Just running &lt;code&gt;git fsck&lt;/code&gt; without any arguments will show some diagnostic results including dangling commits.&lt;/p&gt;

&lt;p&gt;You will want to run &lt;code&gt;git fsck --no-reflogs&lt;/code&gt; to make sure that commits only reachable via the reflog are not considered reachable. The commit for the dropped stash is among the dangling commits logged, but unless your git repository is brand new you will notice there are probably several dangling commits and a lot of other noise being logged by &lt;code&gt;git fsck&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We pipe the output awk to only log the hashes of the dangling commits.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git fsck --no-reflogs | awk &lt;span class=&quot;s1&quot;&gt;&#39;/dangling commit/ {print $3}&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This still might produce a number of hashes. To better determine which hash corresponds to the commit you dropped from the stash, you can pass the hashes to &lt;code&gt;git log&lt;/code&gt; or &lt;code&gt;git show&lt;/code&gt; to get more information.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git show --oneline &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git fsck --no-reflogs | awk &lt;span class=&quot;s1&quot;&gt;&#39;/dangling commit/ {print $3}&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
git log --graph --oneline --decorate &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git fsck --no-reflogs | awk &lt;span class=&quot;s1&quot;&gt;&#39;/dangling commit/ {print $3}&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also filter by date using the &lt;code&gt;until&lt;/code&gt; and &lt;code&gt;since&lt;/code&gt; arguments.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git show --oneline --since&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt; --until&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2017-02-01&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git fsck --no-reflogs | awk &lt;span class=&quot;s1&quot;&gt;&#39;/dangling commit/ {print $3}&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
git log --graph --oneline --decorate --since&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2017-01-01&#39;&lt;/span&gt; --until&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2017-02-01&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git fsck --no-reflogs | awk &lt;span class=&quot;s1&quot;&gt;&#39;/dangling commit/ {print $3}&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;git-repository-browser-gui-tool&quot;&gt;Git Repository Browser (GUI tool)&lt;/h2&gt;

&lt;p&gt;You can also get the dangling commit hashes like the above strategy, but send them to &lt;a href=&quot;https://git-scm.com/docs/gitk&quot;&gt;&lt;code&gt;gitk&lt;/code&gt;&lt;/a&gt; to open them in the git repository browser, which is a GUI tool.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;gitk --all &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git fsck --no-reflogs | awk &lt;span class=&quot;s1&quot;&gt;&#39;/dangling commit/ {print $3}&#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 19 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2015/09/19/recover-a-dropped-git-stash/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2015/09/19/recover-a-dropped-git-stash/</guid>
      </item>
    
      <item>
        <title>Overview of React and Flux</title>
        <description>&lt;p&gt;This will be the first in a series of posts covering React and Flux. The goal of this particular one is to provide a high level overview before we dig into the specifics, so don&amp;#39;t worry if you feel a bit lost as I will likely gloss over many details. There are some resources at the bottom of this post geared towards those getting started and like I mentioned future posts are on the way.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;react&quot;&gt;React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is a library by Facebook that describes itself as a &amp;quot;JavaScript library for building user interfaces&amp;quot;. Essentially React is the view layer of your application. While the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;web component&lt;/a&gt; spec is still just a draft, libraries like React allow you to begin building your web applications with similar composable pieces. Though it is not trying to replicate the web component specifications as much as &lt;a href=&quot;https://www.polymer-project.org/1.0/&quot;&gt;Polymer&lt;/a&gt;, React provides lifecycle hooks like &lt;code&gt;componentDidMount&lt;/code&gt; as well as the ability to nest React components, attach handlers, and manage state. One of the most compelling things about React is its implementation of a &amp;quot;virtual DOM&amp;quot;, an abstraction over the DOM. The key function (and only one that is required to be defined in every React element) is the &lt;code&gt;render&lt;/code&gt; function. This function specifies the virtual DOM representation that React will render for you.&lt;/p&gt;

&lt;p&gt;The primary benefit of the virtual DOM abstraction is that React optimizes performance under the hood by only re-rendering nodes in the tree that have actually changed rather than re-rendering the entire component or tree of components. This means you can worry less about optimizing for performance and just focus on what is being rendered. The best way to understand what will be rendered is to just pretend that each change causes the entire React component tree to be re-rendered, that is treat each render like it is the first. This is conceptually what happens, but without all of the work of actually rendering everything since React is smart enough to only render the changes.&lt;/p&gt;

&lt;p&gt;Another benefit to this abstraction is that since the &lt;code&gt;render&lt;/code&gt; function returns a representation of the virtual DOM rather than the actual DOM, React can render to other targets than just the DOM. &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; renders to native iOS components, and there are other implementations in the works to render to things Android, &lt;a href=&quot;https://github.com/Flipboard/react-canvas&quot;&gt;canvas&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Izzimach/react-three&quot;&gt;WebGL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last high level concept to cover is how React manages state. You can pass in properties to any React component (called &lt;code&gt;props&lt;/code&gt; and accessible via &lt;code&gt;this.props&lt;/code&gt;), which are immutable data that can be rendered or used by the component to determine what to render. React components also have &lt;code&gt;state&lt;/code&gt;, accessible via &lt;code&gt;this.state&lt;/code&gt;, which is meant to be used for the internal mutable state of the component. It is a bit difficult at first to understand when to use &lt;code&gt;props&lt;/code&gt; versus &lt;code&gt;state&lt;/code&gt;, but essentially any state that might change during the component&amp;#39;s lifetime would use the mutable &lt;code&gt;state&lt;/code&gt;. These would be data like whether the component is selected, the quantity on a quantity selector, data in form fields, etc. The &lt;code&gt;props&lt;/code&gt; contain state that does not change (that is, immutable data) during the life of the component instance. This might include data like the type of a component and other configuration data that you might use to initialize a component. Another unique difference between &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;props&lt;/code&gt; is that &lt;code&gt;state&lt;/code&gt; is private and is set up by the component itself when it is initialized, while &lt;code&gt;props&lt;/code&gt; are passed into a component from a parent component higher up in the tree.&lt;/p&gt;

&lt;h2 id=&quot;where-react-falls-short&quot;&gt;Where React falls short&lt;/h2&gt;

&lt;p&gt;The pain point that comes up once you start building something larger and more complex with React is how components communicate. The only way that this can happen with vanilla React is to pass down callback functions as &lt;code&gt;props&lt;/code&gt; for the children to call, but this gets complicated very quickly and does not seem ideal if you want to speak to an ancestor several levels up because you have to pass it through all the intermediary components. Since React is just a library that focuses on the view layer, it can be used within another MVC framework or another architecture pattern entirely. In our case we will investigate Facebook&amp;#39;s solution to this and other problems that are not solved by React alone: Flux.&lt;/p&gt;

&lt;h2 id=&quot;flux&quot;&gt;Flux&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt; pattern is an unidirectional data flow architecture. Before we get into what the unidirectional data flow means, let&amp;#39;s look at the pieces the pattern specifies. First off, I refer to this as a &amp;quot;pattern&amp;quot; rather than a &amp;quot;library&amp;quot; because Facebook has released in detail how they apply this pattern in conjunction with React, but they have only provided the code for a single piece of the puzzle: the &lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/Dispatcher.js&quot;&gt;dispatcher&lt;/a&gt;. It is important to note that this pattern can be used without React, though I will focus on its usage with React.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png&quot; class=&quot;jl-Image&quot;&gt;&lt;/p&gt;

&lt;p&gt;First let&amp;#39;s start with actions. Actions are just POJOs that have two parts: an action type and data. The action type is a constant string, and the data are any information that might be needed about the action that just occurred in order to change state. Actions are typically fired to trigger a change, typically by something like a click handler in a React component.&lt;/p&gt;

&lt;p&gt;All actions must go through the singleton dispatcher, which is the central hub that all data must pass through before state can be changed. This is what ensures the unidirectional data flow; all data must flow in a single direction, the direction the diagram above indicates. Views cannot be updated directly by an action, but instead must go through the dispatcher and make changes in the stores that are later reflected by the views. This means that an action that changes data in the application will not have the problem of cascading changes and potential race conditions. Instead everything must run through a dispatcher singleton that queues up actions and dispatches them one at a time. This is the core purpose of the dispatcher: to queue up actions one at a time and send each action to the stores that are subscribed to it.&lt;/p&gt;

&lt;p&gt;Stores are where application state resides. This should be state that needs to be shared and communicated among components. All other state should be stored in each component&amp;#39;s internal &lt;code&gt;state&lt;/code&gt;. Stores like actions are also just POJOs that hold data. They subscribe to actions using the action type constants mentioned earlier. This means multiple stores can subscribe to the same action. The action handlers receive the data contained in the action and can use it to update their state. At this point stores can emit a change event that the views (React components) which use its data are subscribed to. Best practice is to pass store data into components that require it as &lt;code&gt;props&lt;/code&gt;. This will tell the React components to re-render, which React will handle.&lt;/p&gt;

&lt;p&gt;An analogy to help make it easier to understand the relationship between all the parts of Flux is that of delivering mail. Actions are like the actual letters, containing the data. The store is like a mailbox holding a collection of mail (data). The dispatcher is like the mailman and delivers the mail to the mailboxes. The views (React components) are like the customers that can check the mailboxes for data they are interested in.&lt;/p&gt;

&lt;p&gt;There are many benefits to Flux and its unidirectional data flow. First of all, it is easy to record and replay the state of an application since all actions must pass through the dispatcher one at a time. This facet also makes debugging exceptionally pleasant as the dispatcher can be listened to and, logging the action type and data that are being passed through make finding where bugs are occurring much easier. This usually helps triangulate where the actual bug is located. Lastly, since every action follows the same flow, it is very easy to get up to speed on a Flux application. Once you can follow one flow through the application you can follow any of them.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;React

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome&quot;&gt;Removing User Interface Complexity, or Why React is Awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/&quot;&gt;Comprehensive Guide to Building Apps with React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/series/react-fundamentals&quot;&gt;Egghead.io React Tutorial Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ricostacruz.com/cheatsheets/react.html&quot;&gt;React Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flux

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jonathancreamer.com/what-the-flux/&quot;&gt;What the Flux?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.andrewray.me/flux-for-stupid-people/&quot;&gt;Flux for Stupid People&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/series/react-flux-architecture&quot;&gt;Egghead.io Flux Tutorial Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Further Reading

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&quot;&gt;Smart and Dumb Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@learnreact/container-components-c0e67432e005&quot;&gt;Container Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2015/08/01/overview-of-react-and-flux/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2015/08/01/overview-of-react-and-flux/</guid>
      </item>
    
      <item>
        <title>JavaScript Function Memoization</title>
        <description>&lt;p&gt;In this post I am going to walk through when you might want to use memoization for your JavaScript functions and how you can easily memoize any function. Before we can go much further, let&amp;#39;s define what memoization is.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-is-memoization&quot;&gt;What is memoization?&lt;/h2&gt;

&lt;p&gt;Memoization is an optimization technique where expensive function calls are cached such that the result can be immediately returned the next time the function is called with the same arguments. This method of optimization is not unique to JavaScript and is quite common in many programming languages. It is especially useful in recursive functions as calls are more likely to call with the same arguments while recursing. Take a recursive &lt;code&gt;factorial&lt;/code&gt; function for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we call &lt;code&gt;factorial(3)&lt;/code&gt;, the function calls &lt;code&gt;factorial(3)&lt;/code&gt;, &lt;code&gt;factorial(2)&lt;/code&gt;, and &lt;code&gt;factorial(1)&lt;/code&gt; will be called. If we memoize this function, another call to &lt;code&gt;factorial(3)&lt;/code&gt; will not need to recurse, it can simply return the result that it has cached. The real benefit is if we call &lt;code&gt;factorial(4)&lt;/code&gt;, we will short circuit our recursion, because &lt;code&gt;factorial(3)&lt;/code&gt; is already cached, so we do not need to recurse any further, we can just use that result.&lt;/p&gt;

&lt;h2 id=&quot;sounds-great-sign-me-up&quot;&gt;Sounds great, sign me up!&lt;/h2&gt;

&lt;p&gt;We can simply create a &lt;code&gt;memoize&lt;/code&gt; function that takes another function and modifies it to memoize calls.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can easily memoize any pure function, like our &lt;code&gt;factorial&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;working for factorial(&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;)&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// first call&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; working for factorial(3)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; working for factorial(2)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; working for factorial(1)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// successive calls&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 6&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 6&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// short circuit higher factorial calls&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; working for factorial(4)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://babeljs.io/repl/#?experimental=true&amp;amp;playground=true&amp;amp;evaluate=true&amp;amp;loose=false&amp;amp;spec=false&amp;amp;code=function%20memoize(func)%20%7B%0A%20%20var%20cache%20%3D%20%7B%7D%3B%0A%20%20return%20function()%20%7B%0A%20%20%20%20var%20key%20%3D%20JSON.stringify(arguments)%3B%0A%20%20%20%20if(cache%5Bkey%5D)%20%7B%0A%20%20%20%20%20%20return%20cache%5Bkey%5D%3B%0A%20%20%20%20%7D%0A%20%20%20%20else%20%7B%0A%20%20%20%20%20%20var%20val%20%3D%20func.apply(this%2C%20arguments)%3B%0A%20%20%20%20%20%20cache%5Bkey%5D%20%3D%20val%3B%0A%20%20%20%20%20%20return%20val%3B%0A%20%20%20%20%7D%0A%20%20%7D%3B%0A%7D%0Avar%20factorial%20%3D%20memoize(%0A%20%20function(num)%20%7B%0A%20%20%20%20console.log(&amp;#x27;working%20for%20factorial(&amp;#x27;%20%2B%20num%20%2B%20&amp;#x27;)&amp;#x27;)%3B%0A%20%20%20%20if(num%20%3D%3D%3D%201)%20%7B%20return%201%20%7D%3B%0A%20%20%20%20return%20num%20*%20factorial(num%20-%201)%3B%0A%20%20%7D%0A)%3B%0A%0Aconsole.log(factorial(3))%3B%0Aconsole.log(factorial(3))%3B%0Aconsole.log(factorial(4))%3B&quot;&gt;Play with this example in Babel&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;advanced-usage&quot;&gt;Advanced usage&lt;/h2&gt;

&lt;p&gt;Right now we have memoization working by simply wrapping a given function with our &lt;code&gt;memoization&lt;/code&gt; function. The results are cached for calls with the same arguments. This is great, but what if the arguments are not our only dependencies. What if we are memoizing a method on an object and that method relies on both the arguments AND other properties on the object? How do we account for these other dependencies? If we do not do anything different, memoizing a function might actually cause it to produce incorrect values (if the other dependencies have changed). We need a way to invalidate the cache for these dependencies as well.&lt;/p&gt;

&lt;p&gt;The good news is that we can easily take other dependencies into account. Earlier you might have been wondering why I am using &lt;code&gt;JSON.stringify&lt;/code&gt; to create my cache keys, and soon you will see how this helps make it extremely easy to add any number of dependencies in addition to a function&amp;#39;s arguments.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say we have a &lt;code&gt;Person&lt;/code&gt; model with a firstName and lastName as well as a method, &lt;code&gt;fullName&lt;/code&gt;, that takes an optional argument, title and outputs the person&amp;#39;s full name.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All we need to do to memoize this function on the &lt;code&gt;Person&lt;/code&gt; object, is to update the &lt;code&gt;memoize&lt;/code&gt; function to take a second argument, &lt;code&gt;depsFunc&lt;/code&gt;. &lt;code&gt;depsFunc&lt;/code&gt; will be a function that returns an array of the dependencies. We can then use &lt;code&gt;depsFunc&lt;/code&gt; as well as &lt;code&gt;func&lt;/code&gt; to calculate the unique key in our hash.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;depsFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;depsFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// calculation&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;working...&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// dependencies&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// create a new Person&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Jonathan&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Lehman&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// first call to our memoized function does the work&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Mr.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; working&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Mr. Jonathan Lehman&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// successive calls&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Mr.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Mr. Jonathan Lehman&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// work must be done if dependencies or arguments change&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// change arguments&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Mister&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; work&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Mister Jonathan Lehman&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// change deps&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;person1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Jon&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Mr.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; work&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Mr. Jon Lehman&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://babeljs.io/repl/#?experimental=true&amp;amp;evaluate=true&amp;amp;loose=false&amp;amp;spec=false&amp;amp;playground=true&amp;amp;code=function%20memoize(func%2C%20depsFunc)%20%7B%0A%20%20var%20cache%20%3D%20%7B%7D%3B%0A%20%20return%20function()%20%7B%0A%20%20%20%20var%20key%20%3D%20JSON.stringify(%5BdepsFunc()%2C%20arguments%5D)%3B%0A%20%20%20%20if(cache%5Bkey%5D)%20%7B%0A%20%20%20%20%20%20return%20cache%5Bkey%5D%3B%0A%20%20%20%20%7D%0A%20%20%20%20else%20%7B%0A%20%20%20%20%20%20var%20val%20%3D%20func.apply(this%2C%20arguments)%3B%0A%20%20%20%20%20%20cache%5Bkey%5D%20%3D%20val%3B%0A%20%20%20%20%20%20return%20val%3B%0A%20%20%20%20%7D%0A%20%20%7D%3B%0A%7D%0A%20%20%0Afunction%20Person(firstName%2C%20lastName)%20%7B%0A%20%20this.firstName%20%3D%20firstName%3B%0A%20%20this.lastName%20%3D%20lastName%3B%0A%0A%20%20this.fullName%20%3D%20memoize(%0A%20%20%20%20%2F%2F%20calculation%0A%20%20%20%20function(title)%20%7B%0A%20%20%20%20%20%20console.log(&amp;#x27;working...&amp;#x27;)%3B%0A%20%20%20%20%20%20return%20title%20%2B%20&amp;#x27;%20&amp;#x27;%20%2B%20this.firstName%20%2B%20&amp;#x27;%20&amp;#x27;%20%2B%20this.lastName%3B%0A%20%20%20%20%7D%2C%20%0A%20%20%20%20%2F%2F%20dependencies%0A%20%20%20%20function()%20%7B%20%0A%20%20%20%20%20%20return%20%5Bthis.firstName%2C%20this.lastName%5D%3B%20%0A%20%20%20%20%7D.bind(this))%3B%0A%7D%0A%0Avar%20person%20%3D%20new%20Person(&amp;#x27;Jonathan&amp;#x27;%2C%20&amp;#x27;Lehman&amp;#x27;)%3B%0Aconsole.log(person.fullName(&amp;#x27;Mr.&amp;#x27;))%3B%0Aconsole.log(person.fullName(&amp;#x27;Mr.&amp;#x27;))%3B%0Aconsole.log(person.fullName(&amp;#x27;Mister&amp;#x27;))%3B%0Aperson.firstName%20%3D%20&amp;#x27;Jon&amp;#x27;%3B%0Aconsole.log(person.fullName(&amp;#x27;Mr.&amp;#x27;))%3B&quot;&gt;Play with this example in Babel&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;careful-memoization-is-not-a-magic-bullet&quot;&gt;Careful, memoization is not a magic bullet&lt;/h2&gt;

&lt;p&gt;Keep in mind that memoization does not make sense for all function calls. There is a higher memory overhead since we must store our cached results so that we can later recall them as well as an added complexity of using memoization, so it really only makes sense for functions that are computationally expensive.&lt;/p&gt;

&lt;p&gt;Also, memoization does not work well for functions that are not pure, that is functions that have side effects. Memoizing only allows us to cache a result, so any other side effects get lost on successive calls. That said, you can get around this constraint, by returning a function that includes your side effects that you will need to execute after getting the result.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Mar 2015 00:00:00 -0500</pubDate>
        <link>http://inlehmansterms.net/2015/03/01/javascript-memoization/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2015/03/01/javascript-memoization/</guid>
      </item>
    
      <item>
        <title>Profiling Vim</title>
        <description>&lt;p&gt;Now that you have mastered &lt;a href=&quot;/2014/10/31/debugging-vim/&quot;&gt;debugging in Vim&lt;/a&gt; and gotten all of your Vimscript working as expected, you might be wondering about the performance of those functions? What are the bottlenecks of your Vimscript functions? How long exactly does it take Vim to startup and what is the time breakdown for it to source each of the files and plugins that it needs? How do all those plugins you included in your &lt;code&gt;.vimrc&lt;/code&gt; affect Vim&amp;#39;s load time or performance? If you said yes to any of those questions, you are in luck, Vim provides a profiling command for getting timing information related to your Vimscript&amp;#39;s performance.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;profiling-startup-time&quot;&gt;Profiling Startup Time&lt;/h2&gt;

&lt;p&gt;The simplest profiling you can begin with is to get a breakdown of Vim&amp;#39;s startup process. You can use the &lt;code&gt;startuptime&lt;/code&gt; flag when starting Vim to generate a log file with timestamps on how long it takes Vim to start up and source its various files and plugins.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Stores results in a file called vim.log&lt;/span&gt;
vim --startuptime vim.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will produce a log file similar to following. The total time for my &lt;a href=&quot;https://github.com/jdlehman/dotfiles/tree/master/vim&quot;&gt;Vim setup&lt;/a&gt; to startup is 57.952 milliseconds to give you some sort of reference point. How long does yours take?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Example statuptime output&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;times &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;msec
 clock   self+sourced   self:  sourced script
 clock   elapsed:              other lines

000.008  000.008: --- VIM STARTING ---
000.077  000.069: Allocated generic buffers
000.360  000.283: locale &lt;span class=&quot;nb&quot;&gt;set
&lt;/span&gt;000.364  000.004: clipboard setup
000.373  000.009: window checked
000.815  000.442: inits 1
000.821  000.006: parsing arguments
000.822  000.001: expanding arguments
003.446  002.624: shell init
003.714  000.268: Termcap init
003.731  000.017: inits 2
003.849  000.118: init highlight
005.193  000.972  000.972: sourcing /Users/me/.vim/autoload/plug.vim
007.167  000.022  000.022: sourcing /usr/local/share/vim/vim74/ftoff.vim
007.942  000.042  000.042: sourcing /Users/me/.vim/plugged/vim-mustache-handlebars/ftdetect/mustache.vim

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;profiling-vimscript-functions-files&quot;&gt;Profiling Vimscript Functions/Files&lt;/h2&gt;

&lt;p&gt;While getting information on Vim&amp;#39;s startup might be interesting, startup only happens when we first launch Vim and while a slow startup time might be annoying, what affects getting work done more is the actual performance while Vim is running. To measure this performance, Vim&amp;#39;s &lt;code&gt;profile&lt;/code&gt; command allows us to log time spent executing functions and/or scripts.&lt;/p&gt;

&lt;p&gt;The first thing you must do before profiling anything is to tell Vim to start profiling and to set the file to log output to. As with anything related to profiling, you will use the &lt;code&gt;profile&lt;/code&gt; command, passing it arguments for your intended purpose.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; start profiler and log output to output.log&lt;/span&gt;
profile &lt;span class=&quot;k&quot;&gt;start&lt;/span&gt; output&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you can always pause profiling with &lt;code&gt;profile pause&lt;/code&gt; and start it again with &lt;code&gt;profile continue&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;profiling-functions&quot;&gt;Profiling Functions&lt;/h3&gt;

&lt;p&gt;To begin profiling a function (or multiple functions) you can use the &lt;code&gt;profile func&lt;/code&gt; command that takes a regular expression pattern to specify the function or functions that you want to profile. &lt;code&gt;*&lt;/code&gt; will profile all functions, but be warned you will have quite a bit of output to sift through. It is important to note that you can use the &lt;code&gt;profile func&lt;/code&gt; command multiple times; each time will add another function to the list of functions being profiled. This holds true of the &lt;code&gt;profile file&lt;/code&gt; command as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; begin profiling a function called CloseBuffer&lt;/span&gt;
profile func CloseBuffer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;profiling-files&quot;&gt;Profiling Files&lt;/h3&gt;

&lt;p&gt;To begin profiling a file, you can use the &lt;code&gt;profile file&lt;/code&gt; command that also takes a regular expression pattern to specify the file or files that you want to profile. You should note that profiling only starts when the file is loaded AFTER running the &lt;code&gt;profile&lt;/code&gt; command. This means that using a &lt;code&gt;profile&lt;/code&gt; command within the script file will not work as intended.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; begin profiling a file called myfile.vim&lt;/span&gt;
profile &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; myfile&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; you can source the file manually to get the profiler to pick it up&lt;/span&gt;
source myfile&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is important to note that &lt;code&gt;profile file file.vim&lt;/code&gt; will only profile the script &lt;code&gt;file.vim&lt;/code&gt;. If there are functions within &lt;code&gt;file.vim&lt;/code&gt; that you would also like to be profiled, you can use the &lt;code&gt;profile! file&lt;/code&gt; command (notice the added exclamation point).&lt;/p&gt;

&lt;h3 id=&quot;removing-profiles&quot;&gt;Removing Profiles&lt;/h3&gt;

&lt;p&gt;To remove a file or function from being profiled (perhaps you are finished profiling it and wish to stop logging profile output for it) you can use the &lt;code&gt;profdel&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; stop profiling all files and functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;profdel&lt;/span&gt; *
&lt;span class=&quot;c&quot;&gt;&quot; stop profiling files matching the regex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;profdel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; file1&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; stop profiling functions matching the regex&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;profdel&lt;/span&gt; func myfunc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;sample-profile-output&quot;&gt;Sample Profile Output&lt;/h3&gt;

&lt;p&gt;The following is sample profiling output for the function &lt;code&gt;CloseHiddenBuffers()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;FUNCTION  CloseHiddenBuffers&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
Called 2 &lt;span class=&quot;nb&quot;&gt;times
&lt;/span&gt;Total &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;:   0.023797
 Self &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;:   0.023308

count  total &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   self &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot; store ids of visible buffers
    2              0.000017     let visible_buffers = {}
    4              0.000030     for tab_id in range(1, tabpagenr(&#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;))
    4              0.000015       for buffer_id in tabpagebuflist(tab_id)
    2              0.000013         let visible_buffers[buffer_id] = 1
    2              0.000005       endfor
    2              0.000001     endfor

                                &quot;&lt;/span&gt; close buffers that are not &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;visible dictionary
   31              0.000093     &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;buffer_id &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;range&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, bufnr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;$&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
   29              0.000184       &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;bufloaded&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;buffer_id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; !has_key&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;visible_buffers, buffer_id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   18   0.023249   0.022760         execute &lt;span class=&quot;s1&quot;&gt;&#39;bd &#39;&lt;/span&gt; . buffer_id
   18              0.000057       endif
   29              0.000025     endfor

FUNCTIONS SORTED ON TOTAL TIME
count  total &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   self &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;function
    &lt;/span&gt;2   0.023797   0.023308  CloseHiddenBuffers&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

FUNCTIONS SORTED ON SELF TIME
count  total &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   self &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;function
    &lt;/span&gt;2   0.023797   0.023308  CloseHiddenBuffers&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will notice that the output provides a breakdown of how long it took to execute each line in the function as well as cumulative timings and counts for the number of times the function or lines in the function were called. The &amp;quot;total&amp;quot; time is the time spent in the function while the &amp;quot;self&amp;quot; time does not include time spent in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;other user defined functions&lt;/li&gt;
&lt;li&gt;sourced scripts&lt;/li&gt;
&lt;li&gt;executed autocommands&lt;/li&gt;
&lt;li&gt;external commands like shell commands&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Time waiting for user input is not counted.&lt;/li&gt;
&lt;li&gt;Accuracy is based on the &lt;code&gt;gettimeofday()&lt;/code&gt; system function, which may be accurate to 1/100 of a second.&lt;/li&gt;
&lt;li&gt;Profiling is done for each line. If you have multiple commands on a line that you would like to profile, you must split the line into multiple lines to get profiling information for the individual commands.&lt;/li&gt;
&lt;li&gt;You might notice that the timings do not add up perfectly. This is due to overhead in Vim.&lt;/li&gt;
&lt;li&gt;The &amp;quot;self&amp;quot; time is incorrect when a function is called recursively (calls itself).&lt;/li&gt;
&lt;li&gt;Functions that are deleted with the &lt;code&gt;delfunc&lt;/code&gt; command before Vim exits will not produce profiling information in the profile log.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://inlehmansterms.net/2015/01/17/profiling-vim/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2015/01/17/profiling-vim/</guid>
      </item>
    
      <item>
        <title>Resolving Git Merge Conflicts</title>
        <description>&lt;p&gt;Merge conflicts are no stranger to anyone that uses some form of version control. Git does a great job at auto-merging conflicts, but there are many instances when Git cannot determine what must be done automatically and a manual merge is required. Though this can be a pain at times, Git provides many useful tools to help with more difficult merges. Specifically options like &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; allow us to tell Git what strategy to use when handling merge conflicts so we do not have to merge them manually.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let&amp;#39;s assume we have a branch, &lt;code&gt;branch1&lt;/code&gt;, that has diverged from our master branch. Since &lt;code&gt;branch1&lt;/code&gt; split from the master branch both &lt;code&gt;branch1&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt; have both made changes to the same line of the same file. This means that there will be merge conflicts that Git cannot resolve for us.&lt;/p&gt;

&lt;h2 id=&quot;resolving-conflicts-in-the-middle-of-a-rebase&quot;&gt;Resolving conflicts in the middle of a rebase&lt;/h2&gt;

&lt;p&gt;If we are trying to rebase our branch with the new changes in master we might do something like the following.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git checkout branch1
git rebase master

git diff

&lt;span class=&quot;c&quot;&gt;# ++&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# + Master change&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ++=======&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# + Branch1 change&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ++&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Branch1 branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the output of &lt;code&gt;git diff&lt;/code&gt;. There might be many conflicts within the file, I am just showing one for brevity. Since this is a rebase, the &lt;code&gt;HEAD&lt;/code&gt; is the branch we are rebasing with (&lt;code&gt;master&lt;/code&gt;). If I want to take all of the changes for a file from &lt;code&gt;branch1&lt;/code&gt;, the current branch, I can run &lt;code&gt;git checkout --theirs filename&lt;/code&gt;, rather than dealing with it manually. Likewise, if I want to accept all the changes from &lt;code&gt;master&lt;/code&gt;, the branch with which I am rebasing, I can use &lt;code&gt;git checkout --ours filename&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is important to note that the meaning of &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; is reversed from its normal meaning when being used for a rebase. This is because rebasing replays the current branch&amp;#39;s commits one at a time on top of the branch we want to rebase with. In our case, &lt;code&gt;branch1&lt;/code&gt;&amp;#39;s commits are being replayed on top of &lt;code&gt;master&lt;/code&gt;. This makes &lt;code&gt;master&lt;/code&gt; the &amp;quot;base&amp;quot; branch in this case, which is the reason that &lt;code&gt;ours&lt;/code&gt; will take the changes from &lt;code&gt;master&lt;/code&gt; instead of &lt;code&gt;branch1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resolving-conflicts-in-the-middle-of-a-merge&quot;&gt;Resolving conflicts in the middle of a merge&lt;/h2&gt;

&lt;p&gt;As noted above, the semantics of &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; change when being used in a rebase. If we are trying to resolve conflicts in the middle of a merge, we can use &lt;code&gt;ours&lt;/code&gt; to accept changes from the branch we are currently on and &lt;code&gt;theirs&lt;/code&gt; to accept changes from the branch we are merging in.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s assume that we are trying to perform a merge as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git checkout master
git merge branch1

git diff

&lt;span class=&quot;c&quot;&gt;# ++&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# + Master change&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ++=======&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# + Branch1 change&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ++&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Branch1 branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time, the &lt;code&gt;HEAD&lt;/code&gt; is our current branch, &lt;code&gt;master&lt;/code&gt;. If we want to accept all the changes for a particular file from our current branch we can use &lt;code&gt;git checkout --ours filename&lt;/code&gt;. Otherwise, I can accept all the changes from the branch I am merging in using &lt;code&gt;git checkout --theirs filename&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;choosing-a-merge-strategy-beforehand&quot;&gt;Choosing a merge strategy beforehand&lt;/h2&gt;

&lt;p&gt;You may have noticed that resolving merge conflicts with &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; in the middle of a rebase or merge is the same, except that the semantics of what &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; refer to are different. Both use a flag on &lt;code&gt;git checkout&lt;/code&gt; to choose what must be done per file. This is very useful if you were not planning on having merge conflicts and they pop up in the middle of a rebase/merge or if you want to use a different strategy depending on the file. This means for one file you could use &lt;code&gt;ours&lt;/code&gt;, another &lt;code&gt;theirs&lt;/code&gt;, and another could be done manually.&lt;/p&gt;

&lt;p&gt;In instances that you know that you always want to resolve merge conflicts in the same way, you can choose a merge strategy (such as &lt;code&gt;ours&lt;/code&gt; or &lt;code&gt;theirs&lt;/code&gt;) before performing the rebase or merge. The default merge strategy is a recursive merge. You can also specify the algorithm to use for a recursive merge (patience, minimal, histogram, or myers), but we will not cover those in this post.&lt;/p&gt;

&lt;p&gt;You can choose the merge strategy with the &lt;code&gt;--strategy &amp;lt;strategy-name&amp;gt;&lt;/code&gt; option, or &lt;code&gt;-s &amp;lt;strategy-name&amp;gt;&lt;/code&gt; for short.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# REBASING&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# a rebase that wants to resolve all conflicts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# by taking the current branch&#39;s changes&lt;/span&gt;
git rebase -s theirs rebase_branch
&lt;span class=&quot;c&quot;&gt;# a rebase that wants to resolve all conflicts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# with the rebase_branch changes&lt;/span&gt;
git rebase -s ours rebase_branch

&lt;span class=&quot;c&quot;&gt;#########&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MERGING&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#########&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# a merge that wants to resolve all conflicts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# by taking the current branch&#39;s changes&lt;/span&gt;
git merge -s ours merge_branch
&lt;span class=&quot;c&quot;&gt;# a merge that wants to resolve all conflicts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# with the merge_branch changes&lt;/span&gt;
git merge -s theirs merge_branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you should be able to add the &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; options to your Git merge resolution arsenal. Whenever you find yourself taking all of the changes from a single branch, that should be your queue to use &lt;code&gt;ours&lt;/code&gt; or &lt;code&gt;theirs&lt;/code&gt;. And don&amp;#39;t forget that the meaning of &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; changes within a rebase.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://inlehmansterms.net/2014/12/14/resolving-conflicts-in-git-with-ours-and-theirs/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/12/14/resolving-conflicts-in-git-with-ours-and-theirs/</guid>
      </item>
    
      <item>
        <title>Debugging Vim</title>
        <description>&lt;p&gt;Though the documentation in Vim is fairly comprehensive, it is sometimes difficult to find the information for which you are searching. Another serious problem is that Vimscript is a difficult language to learn/use. Whether you are just copying snippets you found online, or aspiring to write some code of your own in Vimscript, you will inevitably hit problems that you can&amp;#39;t figure out. Google and StackOverflow may fail you. For problems like these it is useful to understand how to debug in Vim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgs.xkcd.com/comics/wisdom_of_the_ancients.png&quot; class=&quot;jl-Image&quot;&gt;&lt;/p&gt;

&lt;p&gt;This post will serve mostly as a reference and primer for your built in debugging options in Vim. The first thing I will go over is Vimscript&amp;#39;s built in debugger, which you can use via the &lt;code&gt;debug&lt;/code&gt; command.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;updates&quot;&gt;Updates&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;9/15/2016&lt;/em&gt;: Updated the verbose command to &lt;code&gt;-V[n]&lt;/code&gt; thanks to &lt;a href=&quot;https://twitter.com/Nitrodist/status/776516287472295936&quot;&gt;Mark Campbell&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vimscript-39-s-debugger&quot;&gt;Vimscript&amp;#39;s Debugger&lt;/h2&gt;

&lt;p&gt;You can start up Vim in its debug mode with the &lt;code&gt;-D&lt;/code&gt; argument.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; opens vim in debug mode&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;D somefile&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is useful for seeing what is run when Vim initializes and might help give you a better idea of everything that happens when you open Vim. You can use this to walk through the Vimscript in your &lt;code&gt;vimrc&lt;/code&gt; that runs when an instance of Vim initializes. I will explain how to use the debugger momentarily.&lt;/p&gt;

&lt;p&gt;If you are interested in profiling your Vim&amp;#39;s startup, you may be interested in starting Vim with the &lt;code&gt;startuptime&lt;/code&gt; option, which will write to a file you specify with timestamps and information about what Vim is loading. You can use this to find bottlenecks or problematic plugins that might be causing Vim to be slow.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; this will write startup info to a file: vim.log&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;startuptime &lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-to-use-the-debugger&quot;&gt;How to Use the Debugger&lt;/h3&gt;

&lt;p&gt;Before we jump into how to use the debugger, you should also know that you can do more than just start up Vim in debug mode as that would not be terribly useful. You can also call the &lt;code&gt;debug&lt;/code&gt; command from within Vim to debug Vimscript functions or commands that have already been sourced.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; debug a command&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;debug&lt;/span&gt; CommandName

&lt;span class=&quot;c&quot;&gt;&quot; debug a fucntion&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; FunctionName&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you are in debug mode, you will see a prompt (&lt;code&gt;&amp;gt;&lt;/code&gt;) in your status bar. This is where you can control and interact with the debugger.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;cont&lt;/code&gt;&lt;/strong&gt;: continue execution until the next breakpoint (if one exists)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;quit&lt;/code&gt;&lt;/strong&gt;: stop current execution, but still stops at the next breakpoint&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;step&lt;/code&gt;&lt;/strong&gt;: execute the current command and come back to debug mode when it is finished&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;next&lt;/code&gt;&lt;/strong&gt;: like &lt;code&gt;step&lt;/code&gt; except it also steps over function calls and sourced files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;interrupt&lt;/code&gt;&lt;/strong&gt;: like quit, but returns to debug mode for the next command&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;finish&lt;/code&gt;&lt;/strong&gt;: finishes the current script or function and returns to debug mode for the next command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should note that each of these debug commands has the shorthand of the first letter of the word [c, q, s, n, i, f] and hitting enter (&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;) will execute the previous command again.&lt;/p&gt;

&lt;p&gt;The last thing you need to know is how to manage breakpoints to your Vimscript. You can add a breakpoint with the &lt;code&gt;breakadd&lt;/code&gt; command, delete it with the &lt;code&gt;breakdel&lt;/code&gt; command, and see all breakpoints with &lt;code&gt;breaklist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding Breakpoints&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; bracketed [] arguments are optional&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; add breakpoint to function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakadd&lt;/span&gt; func &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;lineNumber&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; functionName
&lt;span class=&quot;c&quot;&gt;&quot; add breakpoint to file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakadd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;lineNumber&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; fileName
&lt;span class=&quot;c&quot;&gt;&quot; add breakpoint to current line of current file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakadd&lt;/span&gt; here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Deleting Breakpoints&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; bracketed [] arguments are optional&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; delete breakpoint number from breaklist output&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakdel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; delete all breakpoints&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakdel&lt;/span&gt; *
&lt;span class=&quot;c&quot;&gt;&quot; delete breakpoint on function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakdel&lt;/span&gt; func &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;lineNumber&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; functionName
&lt;span class=&quot;c&quot;&gt;&quot; delete breakpoint on file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakdel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;lineNumber&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; fileName
&lt;span class=&quot;c&quot;&gt;&quot; delete breakpoint at current line of current file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;breakdel&lt;/span&gt; here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/repeat.html#:debug&quot;&gt;Read the documentation for &lt;code&gt;debug&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;general-debugging-with-verbose&quot;&gt;General Debugging with Verbose&lt;/h2&gt;

&lt;p&gt;Other than the &lt;code&gt;debug&lt;/code&gt; command, Vim also has a &lt;code&gt;verbose&lt;/code&gt; command that provides logging when actions take place in Vim, which can also be useful for debugging, especially things like autocommands. I recently used verbose to determine what autocommands I could leverage to hook into netrw (&lt;a href=&quot;/2014/09/04/sane-vim-working-directories/&quot;&gt;see post&lt;/a&gt;). Using verbose is as simple as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; set verbose command&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; set verbose on startup&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;V9 &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can set verbose to any value from 0-15, where 0 is no extra output, and 15 gives you output for everything Vim is doing. Each number progressively adds more output and insight into what Vim is doing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 1  When the viminfo file is read or written.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 2  When a file is &quot;:source&quot;&#39;ed.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 5  Every searched tags file and include file.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 8  Files for which a group of autocommands is executed.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 9  Every executed autocommand.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 12 Every executed function.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 13 When an exception is thrown, caught, finished, or discarded.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 14 Anything pending in a &quot;:finally&quot; clause.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; &amp;gt;= 15 Every executed Ex command (truncated at 200 characters).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will not take much playing around with verbose to become overwhelmed by the amount of output showing up in the status bar. Each message interrupts the flow of Vim, and may make it difficult to do anything. To get around this you can send verbose output to a file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; verbosefile&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;filename&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, you can run verbose for just a single command using &lt;code&gt;[count]verbose&lt;/code&gt;, which is useful if you only want to see what Vim is doing behind the scenes for one small action.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vimscript&quot; data-lang=&quot;vimscript&quot;&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; MyFunction&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/options.html#&amp;#x27;verbose&amp;#x27;&quot;&gt;Read the documentation for &lt;code&gt;verbose&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you should have a good idea of where to begin when debugging and logging output in Vim. Though Vimscript may not be the most enjoyable language to work with, it comes with tools like &lt;code&gt;verbose&lt;/code&gt; and &lt;code&gt;debug&lt;/code&gt; to help you fight the bane of each Vim developer&amp;#39;s existence, Vimscript.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/10/31/debugging-vim/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/10/31/debugging-vim/</guid>
      </item>
    
      <item>
        <title>Responsive Tables with Flexbox</title>
        <description>&lt;p&gt;HTML tables can be frustrating to use. They require a lot of boilerplate and nested HTML to solve such a simple problem. Let&amp;#39;s explore an alternative approach using divs and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes&quot;&gt;Flexbox&lt;/a&gt;. This will give us the benefit of being able to create responsive tables that look great on all screen sizes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First off, the solution will be written with &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; in a modular fashion using &lt;a href=&quot;/2014/08/25/modular-css-with-suitcss/&quot;&gt;SUIT CSS&lt;/a&gt;. We will use a few Sass libraries to aid us in our task. &lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;autoprefixer&lt;/a&gt; for help generating the necessary Flexbox CSS vendor prefixes, and &lt;a href=&quot;http://breakpoint-sass.com/&quot;&gt;Breakpoint&lt;/a&gt; to help with our media queries. If you prefer to work in CSS, feel free to copy the generated CSS from the links to the &lt;a href=&quot;http://sassmeister.com/gist/b38aca96fc6024a28514&quot;&gt;Sassmeister&lt;/a&gt; examples.&lt;/p&gt;

&lt;p&gt;All we need is 3 basic classes to construct our &lt;code&gt;Table&lt;/code&gt; component. First, we need the &lt;code&gt;Table&lt;/code&gt; class, which will use Flexbox to make all its children (rows) flow by column. Next we need a &lt;code&gt;Table-row&lt;/code&gt; class, which will use Flexbox to make all its children (row items/ columns) flow by row without wrapping. Finally, we need the &lt;code&gt;Table-row-item&lt;/code&gt; class, which is essentially a cell in the table component. Now all we need is a &lt;code&gt;Table-header&lt;/code&gt; class that we can add to any row element to give it the styling of a header. Given these criteria, we can write the HTML and Sass for our component as shown below.&lt;/p&gt;

&lt;div class=&quot;Table&quot;&gt;
  &lt;div class=&quot;Table-row Table-header&quot;&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header4&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;Table-row&quot;&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header1&quot;&gt;row1 col1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header2&quot;&gt;row1 col2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header3&quot;&gt;row1 col3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header4&quot;&gt;row1 col4&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;Table-row&quot;&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header1&quot;&gt;row2 col1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header2&quot;&gt;row2 col2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header3&quot;&gt;row2 col3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header4&quot;&gt;row2 col4&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;Table-row&quot;&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header1&quot;&gt;row3 col1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header2&quot;&gt;row3 col2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header3&quot;&gt;row3 col3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header4&quot;&gt;row3 col4&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row Table-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;breakpoint&quot;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Table&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$light-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#ffffff&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$dark-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#f2f2f2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dark-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// .Table-header
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-header&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dark-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Table-row
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-row&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nth-of-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dark-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nth-of-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$light-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nth-of-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$light-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nth-of-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dark-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .Table-row-item
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-item&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;flex-flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;flex-grow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;flex-basis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5em&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;word-break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;break-word&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data-header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$light-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5em&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/b38aca96fc6024a28514&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given this implementation, we can easily create responsive tables. Each row simply splits the number of items into it, into equal columns. This gives us the flexibility to create tables with rows that have disparate numbers of columns. However, this same benefit also has a shortcoming.&lt;/p&gt;

&lt;p&gt;The problem with our table component is that every column is the same width. What happens if we have columns that contain data that we want to be wider or smaller in relation to the other columns? Luckily, Flexbox also makes this concern easy to implement. We can simply add some utility classes to set the Flexbox grow rate for different columns.&lt;/p&gt;

&lt;div class=&quot;Table&quot;&gt;
  &lt;div class=&quot;Table-row Table-header&quot;&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow2&quot;&gt;Long Header1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header4&lt;/div&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow3&quot;&gt;Longer Header5&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header6&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot;&gt;Header7&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;Table-row&quot;&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow2&quot; data-header=&quot;Header1&quot;&gt;row1 col1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header2&quot;&gt;row1 col2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header3&quot;&gt;row1 col3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header4&quot;&gt;row1 col4&lt;/div&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow3&quot; data-header=&quot;Header5&quot;&gt;row1 col5&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header6&quot;&gt;row1 col6&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header7&quot;&gt;row1 col7&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;Table-row&quot;&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow2&quot; data-header=&quot;Header1&quot;&gt;row2 col1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header2&quot;&gt;row2 col2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header3&quot;&gt;row2 col3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header4&quot;&gt;row2 col4&lt;/div&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow3&quot; data-header=&quot;Header5&quot;&gt;row2 col5&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header6&quot;&gt;row2 col6&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header7&quot;&gt;row2 col7&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;Table-row&quot;&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow2&quot; data-header=&quot;Header1&quot;&gt;row3 col1&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header2&quot;&gt;row3 col2&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header3&quot;&gt;row3 col3&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header4&quot;&gt;row3 col4&lt;/div&gt;
    &lt;div class=&quot;Table-row-item u-Flex-grow3&quot; data-header=&quot;Header5&quot;&gt;row3 col5&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header6&quot;&gt;row3 col6&lt;/div&gt;
    &lt;div class=&quot;Table-row-item&quot; data-header=&quot;Header7&quot;&gt;row3 col7&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// generate Flexbox grow-rate utility classes
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.u-Flex-grow&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;flex-grow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row Table-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Long Header1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Longer Header5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Header7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header7&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row1 col7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header7&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row2 col7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row3 col1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row3 col2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row3 col3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row3 col4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item u-Flex-grow3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row3 col5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row3 col6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Table-row-item&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-header=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Header7&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;row3 col7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/de4eab2113204729ea50&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/10/11/responsive-tables-with-flexbox/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/10/11/responsive-tables-with-flexbox/</guid>
      </item>
    
      <item>
        <title>Single Class vs. Multi Class CSS</title>
        <description>&lt;p&gt;As I have mentioned previously in my post on &lt;a href=&quot;/2014/08/25/modular-css-with-suitcss/&quot;&gt;Modular CSS&lt;/a&gt;, structuring Sass/CSS is hard. One of the best ways to determine how clean and well structured the resulting CSS within a project is, is to take a look at the markup being used in project. Overly nested elements typically mean overly nested CSS and if you find it difficult to discern the purpose of the classes on those elements, the CSS itself is probably not semantically written. To add insult to injury, the more classes we add to each element, the harder it becomes to read. What if there was a better way? What if we could just write a single class that provides all the styling we need for a given element?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;single-class-css&quot;&gt;Single Class CSS&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s give the single class approach a try. To keep it simple we will style a button (for the purposes of this example we will use &lt;a href=&quot;/2014/08/25/modular-css-with-suitcss/&quot;&gt;SUIT CSS&lt;/a&gt; to give our CSS semantic meaning). We will assume that we might have different types of buttons, or modifications of the same button, so let&amp;#39;s write a single class for each type of button we may want on our website.&lt;/p&gt;

&lt;p&gt;First let&amp;#39;s model the HTML we would like to generate, and then build the CSS around that model.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Just a Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn-secondary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn-secondary--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wow, that keeps the DOM very clean, and by using SUIT, our classes are very semantic and easy to understand.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn-secondary--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light-grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/ad10c8d57ac2807bcfc8&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The CSS we have written is awfully repetitive. We can improve this by using a preprocessor like Sass.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nv&quot;&gt;%Btn-base&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%Btn-base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$background-color&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn--disabled
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--disabled&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn-secondary
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-secondary&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn-secondary--disabled
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-secondary--disabled&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ColoredBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light-grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/b36147e990969e8ce40d&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the Sass ends up being a lot cleaner than the equivalent CSS, let&amp;#39;s further evaluate this single class approach. So far it is quite appealing, but how does it hold up in a non-trivial example?&lt;/p&gt;

&lt;p&gt;You may have already noticed one of the chinks in the single class armor, &lt;code&gt;.Btn-secondary--disabled&lt;/code&gt;. At first you may be pleased, and even feel clever at how easily we were able to compose our styles with Sass into the easy to use package of a single class. The potential problem is what if we have more classes that can be composed? We will have to create a single class to represent each of these compositions. If we want to be add a modifier that controls the button&amp;#39;s size, we will end up with permutations like &lt;code&gt;.Btn-secondary--small--disabled&lt;/code&gt; and &lt;code&gt;.Btn-secondary--large--disabled&lt;/code&gt;. Or maybe it is &lt;code&gt;.Btn-secondary--disabled--large&lt;/code&gt;? We either will have to remember the order of all of our modifiers, or generate even more CSS by representing each ordering with the same CSS. The single class approach is starting to lose its appeal. The alternative approach is to compose our styles with multiple classes via the multi class approach.&lt;/p&gt;

&lt;h2 id=&quot;multi-class-css&quot;&gt;Multi Class CSS&lt;/h2&gt;

&lt;p&gt;Rather than using a single class to represent all the styles for each element, we can use multiple classes in concert to get the desired effect. We will continue to use the button example from above. Again, the first thing we will start with is our HTML, which we can use as a contract for the CSS we write.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Just a Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn Btn--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn Btn-secondary&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Btn Btn-secondary Btn--disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Secondary Disabled Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based on this HTML, the multi class Sass would be as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn-secondary
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-secondary&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .Btn--disabled
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--disabled&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/5d97c03de86bd194a007&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you will notice about the multi class approach is that there is significantly less Sass required. This is because we do not need to generate the CSS for each combination of styles we might need. Instead we can just create the smallest pieces and compose them to get any combination of styles we desire.&lt;/p&gt;

&lt;p&gt;Multi class CSS lends itself well to writing semantic, modular CSS. If the composability doesn&amp;#39;t win you over just look at the difference in the generated CSS from our two Sass examples.&lt;/p&gt;

&lt;h3 id=&quot;single-class-generated-css&quot;&gt;Single Class Generated CSS&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.Btn-secondary--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn-secondary--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;light-grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;multi-class-generated-css&quot;&gt;Multi Class Generated CSS&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.Btn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn-secondary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Btn--disabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Both the Sass and generated CSS are simpler and more concise in this trivial example. Imagine how many more single classes would need to be generated for a large web application, a class for each possible combination of style groupings. This would grow at an exponential rate, and become unmanageable rather quickly. Its multi class equivalent would generate the minimal pieces and enable the user to combine these classes in a number of ways in the DOM, a much more flexible approach. Single classes would also be very difficult to extend, which would be terrible in any application and even more so in a CSS framework.&lt;/p&gt;

&lt;p&gt;Though a single class approach may be tempting at first glance, reconsider before you make the leap. A multi class approach will pay off in the long run and will help enable you to write simple, but powerful classes to accomplish any styling need you may have.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;

&lt;p&gt;I highly recommend this &lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot;&gt;article&lt;/a&gt; on HTML semantics by Nicolas Gallagher, which takes a look at semantic CSS, including the multi class vs single class issue.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/09/19/single-class-vs-multi-class-css/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/09/19/single-class-vs-multi-class-css/</guid>
      </item>
    
      <item>
        <title>Sane Vim Working Directories</title>
        <description>&lt;p&gt;Vim&amp;#39;s defaults are rather dated. Without syntax highlighting, line numbers, or a variety of other defaults found in most modern editors, the initial headache is always configuring these basic settings before starting with Vim. Despite the obvious visual settings, there are a number of Vim defaults that are not apparent when you first start learning Vim, or even after you have been using Vim for a while if you were fortunate enough not to run into an issue. For that reason, it took me a while to realize that I was continually fighting with Vim&amp;#39;s default working directory.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;vim-39-s-default-working-directory&quot;&gt;Vim&amp;#39;s Default Working Directory&lt;/h2&gt;

&lt;p&gt;By default Vim uses the directory that you opened Vim in as the default working directory. You can check the current working directory by running the command, &lt;code&gt;pwd&lt;/code&gt; (print working directory). Honestly, I don&amp;#39;t believe this is a bad default. It makes a lot of sense if you open Vim and stay in that project directory for the entirety of your working session, but it begins to breakdown with fairly typical use cases.&lt;/p&gt;

&lt;h2 id=&quot;why-does-it-matter&quot;&gt;Why does it matter?&lt;/h2&gt;

&lt;p&gt;Before we jump into the cases where the default working directory breaks down, why do we even care what Vim uses as the current working directory? The working directory is used for any Vim action that needs to know about the current file structure such as searching and file/directory based commands. This not only includes built in file searching solutions like Vim&amp;#39;s &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;grep&lt;/code&gt; commands, but also search plugins like &lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;CtrlP&lt;/a&gt;, &lt;a href=&quot;https://github.com/wincent/command-t&quot;&gt;Command-T&lt;/a&gt;, and &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;. If you use any sort of file search or fuzzy search, the working directory affects the outcome of the search. It determines where the searching begins (in combination with the path variable).&lt;/p&gt;

&lt;h2 id=&quot;where-it-breaks-down&quot;&gt;Where it breaks down&lt;/h2&gt;

&lt;p&gt;Any of the following cases will prevent you from searching the entire file structure of your desired project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You open Vim with a nested file/folder within your project.&lt;/li&gt;
&lt;li&gt;You open Vim at your project&amp;#39;s root, but navigate to another project in the file explorer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While these cases are general, I found them to be extremely common cases that made it frustrating to move around my projects via fuzzy searches and filename searches, which is my normal workflow for jumping between files that are not already in hidden buffers.&lt;/p&gt;

&lt;h2 id=&quot;a-simple-solution&quot;&gt;A simple solution&lt;/h2&gt;

&lt;p&gt;A simple way to get around this is to manually change the working directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; change the working directory to the directory of the currently open file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; %&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; change the working directory only for the current window&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lcd&lt;/span&gt; %&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; change the working directory to an explicit directory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;lcd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/projects/&lt;/span&gt;myproject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can even use an autocommand to automatically change the working directory for you whenever a buffer is entered.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;autocmd &lt;span class=&quot;nb&quot;&gt;BufEnter&lt;/span&gt; * &lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lcd&lt;/span&gt; %&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I found that while this solution can work, it is very limited. I do not always want my working directory to be the directory of the file I am currently editing. If this is nested in a project, it does not help me search on files outside of that nested directory. The alternative, setting the working directory explicitly, is too manual of a process for my liking. There has to be a better way.&lt;/p&gt;

&lt;h2 id=&quot;a-more-robust-solution&quot;&gt;A more robust solution&lt;/h2&gt;

&lt;p&gt;Before I get to the Vimscript, let&amp;#39;s outline some rules for a desirable working directory. I want to make use of autocommands so that the working directory changes automatically rather than being a manual process. I also normally work in Git projects, so let&amp;#39;s set the working directory to the root of the Git project if we are within a Git project, otherwise use the directory of the currently open file. Lastly, I want to follow symlinks into their actual directories. This is especially useful for my dotfiles that are in a Git repo, but symlinked to my home directory.&lt;/p&gt;

&lt;p&gt;First let&amp;#39;s figure out a way to follow symlinks.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; follow symlinked file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; FollowSymlink&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; current_file &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;%:p&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; check if file type is a symlink&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; getftype&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;current_file&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;link&#39;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; if it is a symlink resolve to the actual file path&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot;   and open the actual file&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; actual_file &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; resolve&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;current_file&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; execute &lt;span class=&quot;s1&quot;&gt;&#39;file &#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; actual_file
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only caveat with this approach is that we will need to use &lt;code&gt;w!&lt;/code&gt; instead of just &lt;code&gt;w&lt;/code&gt; to save the file for the first time. One extra keystroke is a worthwhile trade off to me. Otherwise I would have to use the file explorer or &lt;code&gt;netrw&lt;/code&gt; to find the actual file, which would take much longer.&lt;/p&gt;

&lt;p&gt;Now we can use another function to set the working directory for us. It will use the Git project root if it is in a Git project otherwise it will just use the current file&amp;#39;s directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; set working directory to git project root&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; or directory of current file if not git project&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; SetProjectRoot&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; default to the current file&#39;s directory&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;lcd&lt;/span&gt; %&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; git_dir &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git rev-parse --show-toplevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; See if the command output starts with &#39;fatal&#39; (if it does, not in a git repo)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; is_not_git_dir &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; matchstr&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;git_dir&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;^fatal:.*&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&quot; if git project, change local directory to git project root&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; empty&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;is_not_git_dir&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lcd&lt;/span&gt; `&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;git_dir`
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the two pieces we need, we can use these functions in an autocommand to automatically change the working directory for us, we won&amp;#39;t even have to think about it, it will just work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; follow symlink and set working directory&lt;/span&gt;
autocmd &lt;span class=&quot;nb&quot;&gt;BufRead&lt;/span&gt; *
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; FollowSymlink&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SetProjectRoot&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-final-problem&quot;&gt;The Final Problem&lt;/h2&gt;

&lt;p&gt;You can take the above solution, and it will work in ALMOST every case. The good news is that after a few frustrating months of using a nearly ideal solution, I have finally figured out the missing piece.&lt;/p&gt;

&lt;p&gt;The issue with what we have written so far is that the working directory will not be updated when navigating the file system with &lt;code&gt;netrw&lt;/code&gt;, Vim&amp;#39;s built in (and buggy) file explorer. The problem is that &lt;code&gt;netrw&lt;/code&gt; does not get a &lt;code&gt;BufRead&lt;/code&gt; event. In fact, pretty much every autocommand event I tried did not work in &lt;code&gt;netrw&lt;/code&gt;. I got around this for a while, by configuring &lt;code&gt;netrw&lt;/code&gt; with &lt;code&gt;let g:netrw_keepdir=0&lt;/code&gt;. This global setting will keep the working directory the same as the browsing directory while we are using &lt;code&gt;netrw&lt;/code&gt;, which is ultimately half of our solution. It still will not respect our Git project directories in the manner we would like.&lt;/p&gt;

&lt;p&gt;After a lot of research and failed attempts I finally found a way to debug autocommands. &lt;code&gt;set verbose=9&lt;/code&gt; will echo the autocommand events that are registered as well as any functions that are called by these events. The only autocommand that seemed to get called in &lt;code&gt;netrw&lt;/code&gt; is the &lt;code&gt;CursorMoved&lt;/code&gt; event. Therefore we can hook into this to enable our working directory to remain up to date even in &lt;code&gt;netrw&lt;/code&gt;. If anyone knows of another autocommand that &lt;code&gt;netrw&lt;/code&gt; listens to, I would love to know!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; netrw: follow symlink and set working directory&lt;/span&gt;
autocmd &lt;span class=&quot;nb&quot;&gt;CursorMoved&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt; *
  &lt;span class=&quot;c&quot;&gt;&quot; short circuit for non-netrw files&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &amp;amp;&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;netrw&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; FollowSymlink&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; SetProjectRoot&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;  \&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to set &lt;code&gt;verbose&lt;/code&gt; back to 0 otherwise you will find that your productivity has come to a halt because of all of the event logging. Stay tuned as the Vim &lt;code&gt;verbose&lt;/code&gt; is likely to become the topic of another blog post.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/09/04/sane-vim-working-directories/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/09/04/sane-vim-working-directories/</guid>
      </item>
    
      <item>
        <title>Modular CSS with SUIT CSS</title>
        <description>&lt;p&gt;Structuring CSS is hard. I have worked on many projects where the CSS was just an afterthought, a hack to get the page to look a particular way. With the increasing interest in frontend tools and development, these days are behind us.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Ask yourself the question, &amp;quot;how and why do we apply structure to the code we write?&amp;quot; Now you might wonder, why don&amp;#39;t we apply these same rules and considerations to the CSS (and Sass) that we write? There is no reason to skimp on our style architecture. One way we can bring clarity and structure is by writing modular CSS with the &lt;a href=&quot;http://suitcss.github.io/&quot;&gt;SUIT CSS&lt;/a&gt; convention.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fc09.deviantart.net/fs71/f/2012/079/5/7/suit_up_by_mthidell-d4tdnyw.jpg&quot; class=&quot;jl-Image&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;suit-css-introduction&quot;&gt;SUIT CSS Introduction&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s dive right into it. The basic structure of SUIT is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.namespace-ComponentName-descendantName--modifierName.is-stateName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.u-utilityName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It might look weird at first as it is different than the CSS you have written in the past, but bear with me, it&amp;#39;s purpose will become clear. This is not necessarily what each of your class declarations will look like, but is meant to serve as a guide and reference to writing semantic SUIT CSS. Each declaration you make will probably contain parts of the structure above.&lt;/p&gt;

&lt;h3 id=&quot;breaking-it-down&quot;&gt;Breaking it down&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;namespace&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;namespace&lt;/code&gt; is optional and allows you to write CSS that will not conflict with any other libraries. This is written in camel case.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ComponentName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ComponentName&lt;/code&gt; is your top level component such as &lt;code&gt;Form&lt;/code&gt;. This is written in pascal case.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;descendantName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;descendantName&lt;/code&gt; is a part of your component that is applying styles on the components behalf. Your &lt;code&gt;Form&lt;/code&gt; component might have a &lt;code&gt;group&lt;/code&gt; descendant, &lt;code&gt;Form-group&lt;/code&gt;. This is written in camel case and follows the base component with a &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modifierName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;modifierName&lt;/code&gt; is a presentation class that modifies the base class in some way. Ex: &lt;code&gt;Form--small&lt;/code&gt;, &lt;code&gt;Form--large&lt;/code&gt;, &lt;code&gt;Btn--primary&lt;/code&gt;, etc. This is written in camel case and follows the base component with a &lt;code&gt;--&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is-stateName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;is-stateName&lt;/code&gt; represents the current state of the element (if any). Ex: &lt;code&gt;is-disabled&lt;/code&gt;, &lt;code&gt;is-active&lt;/code&gt;, etc. This is written in camel case and is unlike the previous examples as it is a separate class added to an element.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;u-utilityName&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;u-utilityName&lt;/code&gt; is the odd one. The utility class does not apply to a single component, but is general enough in nature that it can add styling to just about any component. Ex: &lt;code&gt;u-inlineBlock&lt;/code&gt;, &lt;code&gt;u-floatRight&lt;/code&gt;, &lt;code&gt;u-clearfix&lt;/code&gt;, etc. &lt;a href=&quot;http://www.basscss.com/&quot;&gt;BASSCSS&lt;/a&gt; has many good example utility classes (though not written in a strict SUIT CSS syntax).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-practical-example&quot;&gt;A Practical Example&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s get some SUIT under our belts with an actual example. We will build out the &amp;quot;awesome box&amp;quot; component.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// sass
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox--small
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--small&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox-title
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox-title--large
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--large&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// .my-AwesomeBox.is-selected
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.is-selected&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.my-u-center&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* generated css */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;250px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox--small&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox-title--large&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.my-AwesomeBox.is-selected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.my-u-center&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/a166888f44271c291c80&quot;&gt;Play with this example on Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;

&lt;p&gt;While it might feel strange at first glance, give SUIT a shot (or at least another modular CSS variant like &lt;a href=&quot;http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/&quot;&gt;BEM&lt;/a&gt;). Writing CSS/Sass in this manner provides a number of great benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistency and structure

&lt;ul&gt;
&lt;li&gt;This is much better than a hodgepodge of arbitrary CSS randomly strung about with no semantic meaning&lt;/li&gt;
&lt;li&gt;Anyone can enter the project and easily understand and contribute&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Separation of concerns&lt;/li&gt;
&lt;li&gt;Promotes reuse of code by creating the building blocks for the site with components&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot;&gt;Semantic syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Composable and extendable CSS

&lt;ul&gt;
&lt;li&gt;Modularity makes it easy to extend components and compose components to get the sum of their parts&lt;/li&gt;
&lt;li&gt;This is particularly useful for building style frameworks as it allows users of the framework to easily make it their own without fighting the framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/08/25/modular-css-with-suitcss/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/08/25/modular-css-with-suitcss/</guid>
      </item>
    
      <item>
        <title>Vim Macros</title>
        <description>&lt;p&gt;One of the big advantages I find to using vim as my editor is the ability to record and replay macros. The recording of a macro begins when &lt;code&gt;q&lt;/code&gt; is pressed followed by any other key, which specifies what register the macro is to be stored in. If we use &lt;code&gt;qq&lt;/code&gt; the macro will be stored in register &lt;code&gt;q&lt;/code&gt;, whereas &lt;code&gt;qt&lt;/code&gt; will store the macro in register &lt;code&gt;t&lt;/code&gt;. Once the recording is started, all keystrokes are stored into the specified register. Pressing &lt;code&gt;q&lt;/code&gt; again will stop the recording. To &amp;quot;playback&amp;quot; the macro, which will just execute the contents of the register as if you were pressing the keystrokes yourself, type &lt;code&gt;@&lt;/code&gt; followed by the register in which you stored the macro. &lt;code&gt;@@&lt;/code&gt; will playback the most recently played macro.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I find that a good baseline for when a macro might be useful is for repetitious editing or reformatting that cannot easily be accomplished using visual block mode. For example, given the following Ruby method, let&amp;#39;s say I wanted to modify the additional method calls to use parenthesis.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run_something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run_something2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run_something3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg3&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# etc...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To do this we can start on the first line of the method (not the definition) and press &lt;code&gt;qq&lt;/code&gt; to being recording our macro to register &lt;code&gt;q&lt;/code&gt;. We can type &lt;code&gt;^wi(^[A)^[&lt;/code&gt; followed by &lt;code&gt;q&lt;/code&gt; to stop the recording, where &lt;code&gt;^[&lt;/code&gt; is the escape character. Now we can execute &lt;code&gt;@q&lt;/code&gt; on each line we want to modify to be wrapped in parenthesis to get the following result.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run_something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run_something2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run_something3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# etc...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s break down the macro as it looks like gibberish when pasting the contents of the register as I did above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; takes our cursor to the beginning of the line. This ensures that we always start from the same location and follows the principle of generalizing a macro as much as possible to optimize the potential for reuse.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; jumps to the next word, which happens to be the beginning of our first argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i(^[&lt;/code&gt; goes into insert mode and writes an open parenthesis then escapes back into normal mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A)^[&lt;/code&gt; goes into insert mode at the end of the line and inserts a closing parenthesis before escaping back into normal mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we break the macro down, it is actually really simple. Another thing we could have done is typed &lt;code&gt;j&lt;/code&gt; before we stopped recording which would have taken us to the next line of code automatically. Then we could have used a single command, &lt;code&gt;3@q&lt;/code&gt;, instead of 3 separate commands to do the same amount of work.&lt;/p&gt;

&lt;p&gt;I already mentioned the notion of generalizing a macro to allow for its reuse. I think this is where macros can really shine. Every now and then you might create a macro that you would actually find useful in your everyday development. What do you do? You can simply create a mapping in your &lt;code&gt;vimrc&lt;/code&gt; to run this macro such that it will always be available for use even if the original register you recorded it in is overwritten eventually. In your &lt;code&gt;vimrc&lt;/code&gt; paste your macro in with &lt;code&gt;&amp;quot;qp&lt;/code&gt;, where &lt;code&gt;q&lt;/code&gt; is the register you used to record the macro. We are halfway there, simply add a mapping in front of this pasted content like, &lt;code&gt;nnoremap &amp;lt;leader&amp;gt;(&lt;/code&gt;. The final result looking like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt; ^wi&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;^&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;A&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;^&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our old macro turned mapping will run whenever we type &lt;code&gt;&amp;lt;leader&amp;gt;(&lt;/code&gt; in normal mode.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/08/07/vim-macros/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/08/07/vim-macros/</guid>
      </item>
    
      <item>
        <title>Database Associations- &quot;Has One&quot; vs &quot;Belongs To&quot;</title>
        <description>&lt;h2 id=&quot;which-one-goes-where&quot;&gt;Which One Goes Where?&lt;/h2&gt;

&lt;p&gt;One of the most confusing database relationship questions for me was always when to use &lt;code&gt;has_one&lt;/code&gt; vs &lt;code&gt;belongs_to&lt;/code&gt;. The relationship is a simple one-to-one relationship, and if we think about it in terms of the models, it makes a lot of sense. For example, let&amp;#39;s say we have a &lt;code&gt;Dog&lt;/code&gt; model and an &lt;code&gt;Owner&lt;/code&gt; model. Immediately we can say the &lt;code&gt;Owner has_one Dog&lt;/code&gt; and the &lt;code&gt;Dog belongs_to Owner&lt;/code&gt;. In this case, the objects are familiar to us from our everyday life and it is easy to figure out. When the objects are more abstract like &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; it is much more difficult to determine. Let&amp;#39;s hold that thought for a moment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The trickiest part of this whole ordeal for me was always figuring out which model object has the &lt;code&gt;foreign_key&lt;/code&gt; on it, the &lt;code&gt;id&lt;/code&gt; of the other model with which it is associated. This &lt;code&gt;foreign_key&lt;/code&gt; is actually the only difference between the &lt;code&gt;has_one&lt;/code&gt; and &lt;code&gt;belongs_to&lt;/code&gt; semantic naming in a one-to-one relationship. The question is, does it go on the model that &lt;code&gt;belongs_to&lt;/code&gt; the other or the one that &lt;code&gt;has_one&lt;/code&gt; of the first prior? Let&amp;#39;s go back to my original example with the &lt;code&gt;Owner&lt;/code&gt; and the &lt;code&gt;Dog&lt;/code&gt;. In this case, the &lt;code&gt;Owner has_one Dog&lt;/code&gt;. In real life, most dogs are required to wear collars with some identification, typically the owner&amp;#39;s name and address, in case the dog gets lost. Did you catch that? The dog has the owner&amp;#39;s id on it, or relating it back to our database model, the &lt;code&gt;foreign_key&lt;/code&gt;! Since &lt;code&gt;Dog belongs_to Owner&lt;/code&gt;, the &lt;code&gt;foreign_key&lt;/code&gt; will be on the &lt;code&gt;Dog&lt;/code&gt; model, meaning the object that &lt;code&gt;belongs_to&lt;/code&gt; the other will always have the &lt;code&gt;foreign_key&lt;/code&gt; that makes the association. This example makes it easy to remember where the &lt;code&gt;foreign_key&lt;/code&gt; belongs, but we still do not know how to determine which object belongs to the other in a more abstract case.&lt;/p&gt;

&lt;p&gt;Going back to the previously mentioned example with models, &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt;, let&amp;#39;s make some assumptions. Let&amp;#39;s assume that &lt;code&gt;Foo has_one Bar&lt;/code&gt;. For you Rails users, the Rails associations would look as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/foo.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_one&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/bar.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to find the &lt;code&gt;Bar&lt;/code&gt; that belongs to a given &lt;code&gt;Foo&lt;/code&gt;, the SQL would look something like the following.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot; data-lang=&quot;mysql&quot;&gt;-- &quot;has_one&quot; query
-- Find the Bar that belongs to a given Foo
-- assume an intance foo of Foo already exists
SELECT *
FROM Bar
WHERE foo_id = foo.id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rails Active Record equivalent will call the above SQL behind the scenes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To do the inverse, get a &lt;code&gt;Foo&lt;/code&gt; for a given &lt;code&gt;Bar&lt;/code&gt;, the SQL would look something like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot; data-lang=&quot;mysql&quot;&gt;-- &quot;belongs_to&quot; query
-- Find the Foo that has a given Bar
-- assume an instance bar of Bar already exists
SELECT *
FROM Foo
WHERE id = bar.foo_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rails Active Record equivalent will call the above SQL behind the scenes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully now you know where to place the &lt;code&gt;foreign_key&lt;/code&gt; (think of our &lt;code&gt;Owner has_one Dog&lt;/code&gt; example) as well as the underlying reasons that this makes sense. You should also have a good sense of the SQL required to get the association in both directions and understand where to put the &lt;code&gt;foreign_key&lt;/code&gt; on models that are more abstract.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/07/28/has_one-vs-belongs_to/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/07/28/has_one-vs-belongs_to/</guid>
      </item>
    
      <item>
        <title>Groove to a Vertical Rhythm</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Grid frameworks are awesome. They solve a number of problems and enable developers to easily create virtually any layout they imagine. Paired with media queries, responsive layouts become more accessible and great experiences at all screen sizes are becoming more common.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Grids allow us to be lazy and not think about all the &amp;quot;complex math&amp;quot; they require. In actuality, grid frameworks are simple. Want to take up 6 columns on a 12 column grid? Set the width to 50%. Add some margins and clearfixes, and BOOM. You have yourself a &lt;a href=&quot;https://github.com/mourner/dead-simple-grid&quot;&gt;simple grid framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The purpose of a grid is to arrange our content in a well organized and define way. As humans, we are better at understanding patterns and organized content, and are more likely to read and retain information from such. Translation: great page organization leads to a better user experience. However, just organizing information on a grid-like structure is not enough. If you put too much content on a page it quickly becomes cluttered and unreadable again. The mere structure of a grid is not enough. Like anything, it must also be used wisely. The emergence of simple designs shows the importance of not only the content, but the white space around it. Readability is end-goal of typographic work.&lt;/p&gt;

&lt;p&gt;While grid frameworks are great at organizing content horizontally, they fail miserably at organizing content vertically, that is establishing the vertical rhythm of the page. Like I mentioned earlier, humans intrinsically love patterns, and a strong vertical rhythm furthers the horizontal pattern employed by the grid by creating a vertical pattern.&lt;/p&gt;

&lt;p&gt;The simplest analogy to vertical rhythm is the lines on a sheet of loose-leaf paper. You may have noticed by now that this page has dotted lines just like a sheet of paper. Notice how the text fits nicely in each line. The line does not hug the text, but provides a small amount of space, making the text readable and not looked cramped. Notice how each dotted line is the same distance apart, creating our rhythm. I am going to refer to this distance as the base line-height, which is derived from the base font-size, the size of the text you are currently reading.&lt;/p&gt;

&lt;p&gt;So it appears that the base font-size fits perfectly in our lines, but what happens when the text is much larger than the base line-height. How can it possibly fit? Scroll up and take a look at the headers. What do you notice? The base line-heights are all the same, but large text takes up a number of FULL lines. The full part is important. In order to preserve vertical rhythm, we must ensure that each element takes up an integer number of lines. If it does not, the vertical rhythm will be off at that point on the page.&lt;/p&gt;

&lt;p&gt;It appears the key to vertical rhythm is that all elements must take up a height of &lt;code&gt;(n * base line-height)&lt;/code&gt; where n is an integer value.&lt;/p&gt;

&lt;p&gt;Now we understand what vertical rhythm is and why it is desirable when composing a site&amp;#39;s design. But how do we achieve this lofty goal? One way would be to calculate line-heights and font-sizes manually for various elements in your CSS. That does not sound like a lot of fun to me. Let&amp;#39;s avoid that tedious work and leverage some &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; mixins to do the work for us. If you have not used Sass before, I highly recommend playing around with it in &lt;a href=&quot;http://sassmeister.com/&quot;&gt;Sassmeister&lt;/a&gt;. I will link some Sassmeister examples for you to play with as we explore creating vertical rhythm with Sass.&lt;/p&gt;

&lt;p&gt;Another thing to note before we continue, is that we will be using rems, root ems. This will allow us to keep our vertical rhythm even if we change the base font-size because everything will scale up.&lt;/p&gt;

&lt;h2 id=&quot;implementation-details&quot;&gt;Implementation Details&lt;/h2&gt;

&lt;p&gt;First let&amp;#39;s figure out what we need to solve conceptually. We want all of our elements to fit uniformly within our base line-height lines. There are two primary cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when the font-size is &lt;em&gt;smaller&lt;/em&gt; than the base line-height&lt;/li&gt;
&lt;li&gt;when the font-size is &lt;em&gt;larger&lt;/em&gt; than the base line-height&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;#39;s gradually build up a Sass solution to handle these cases. First we will need to set up the basis for our vertical rhythm, the base font-size and line-height. While we are at it, we will also set up some base styles.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$base-font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$line-height-ratio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// base line-height = 16px * 1.5 = 24px
&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$base-font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$line-height-ratio&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;sx&quot;&gt;url(http://basehold.it/i/24)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/f3a46154fff6c2e2f8f3&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are simply setting our base-font size and line height at the DOM root, the html element. By setting our base font-size on this element, we can define any additional sizes in rems to make them relate to the base font-size. If we then use media queries to change the font-size on the html element, all other sizes defined in rems will scale proportionally. You might be wondering why we are setting the top and bottom margins and padding on all elements to 0. This is to prevent any browser (or normalize.css) defaults from throwing off our vertical rhythm. In a bit, we will see how we can take control of the top and bottom to gain more vertical rhythm superpowers. Lastly, you might have noticed we are setting a background image. &lt;a href=&quot;http://basehold.it/&quot;&gt;Basehold.it&lt;/a&gt; is one of the tools I have found most valuable in understanding and debugging my site&amp;#39;s vertical rhythm. You can set it as a background as I have done, where the integer at the end of the URL specifies the base line-height, that is how a far apart you want the lines, in pixels. Basehold.it also allows you to import it as a stylesheet and even set the color of the lines.&lt;/p&gt;

&lt;p&gt;As you can see, with this small amount of Sass, we have solved our first case. We now have vertical rhythm for all font-sizes that are less than or equal to our base line-height, which would be 24px with this base font size, &lt;code&gt;($base-font-size * $line-height-ratio)&lt;/code&gt;. What happens if we try to add fonts with a size greater than this?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font-size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wait a minute, that works! Did we just solve both of our cases without even making use of our Sass specific powers? We could have just done this in CSS! Slow your roll. It is true that this works, take a look at the Sassmeister example above to verify that the h2 now fits centered on 2 lines, which is exactly what we want. Why does this work?&lt;/p&gt;

&lt;p&gt;Since we are setting the font-size to 2rem, it is indeed larger than the base font-size, but it is exactly 2 times larger. This relationship is important. This means it&amp;#39;s line-height would be &lt;code&gt;32px * 1.5 = 48px&lt;/code&gt;. What is so special about 48px? It is exactly 2 times our base line-height! This is why it works in that case. But what if the font-size is 2.4rem? Now we see that the vertical rhythm is thrown off. By using whole number rem values, we can guarantee that everything will always be a multiple of our base line-height, and therefore keep our vertical rhythm. Using whole number rem values is an easy convention to follow and you get vertical rhythm with practically no CSS necessary. Components could even be composed of parts that are not whole number rem values as long as the sum of their parts equals a whole rem value. &lt;a href=&quot;http://www.basscss.com/&quot;&gt;BASSCSS&lt;/a&gt; is a great example of this simple approach in practice. The simplicity of the project and the amount it is able to accomplish speaks for itself. If you think this is all you need for your use case, take these lessons and run with them, there is nothing wrong with taking the path of simplicity. In fact it will often lead to the least headaches down the road. However, this usecase is not for everyone.&lt;/p&gt;

&lt;p&gt;What if you want to use a modular scale and cannot guarantee whole number rem values? What if we come back to the project 5 years later and forget this constraint? What if we are working on a large team and a new team member does not realize this rule? Regardless, we now have less control over our font-sizes and need to manually manage the minute details to ensure vertical rhythm. Let&amp;#39;s take advantage of our Sass powers and build a mixin that will overcome these limitations and do the work for us.&lt;/p&gt;

&lt;p&gt;First let&amp;#39;s build what we already know. We will take in the desired font-size of our element and use it to determine the number of base line-heights our line-height must be set to in order for the element to take up a whole number of base lines.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$base-font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$line-height-ratio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line-height-ratio&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vertical-rhythm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// determine how many lines this font-size will take up
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// example usage
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vertical-rhythm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.4rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/de630d458c15520247c1&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we see that we can use any font-size and it will still follow the vertical rhythm. I am sad to admit when we have come so far, that I over-simplified my cases from earlier. There is actually a third case. Not all DOM elements abide by the rules of line-height. Line-height only makes sense for elements I like to refer to as &amp;quot;text-based elements&amp;quot;. Elements like paragraphs, spans, and headers are all ruled by line-height. The actual height of the element depends on the amount of text within the element as well as how wide the container is and how many times the text must wrap to a new line. Each new line still preserves the line-height and vertical rhythm. The other kind of elements, that I will refer to as &amp;quot;non-text-based elements&amp;quot;, such as images, divs, and other containers are not governed by line-height in the same way that text-based elements are. Instead, they are governed by the defined height property. So you may wish to think of these two groups as line-height based elements and height-based elements. Though you can set the height on either of these, it is natural to set the line-height for a paragraph element, while setting the height of an image. The other way around and you end up with weird behavior. Likewise, we must abide by this natural order when establishing vertical rhythm.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s handle this additional case:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// add $use-height parameter
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vertical-rhythm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$use-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// determine how many lines this font-size will take up
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// use height for height-based element, otherwise use line-height
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$use-height&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$leftover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;$sb-line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// use leftover height to take up a whole number of base-lines
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// this leftover space is not needed for line-height based elements
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// because line-height takes up the entire whole number of base-lines itself
&lt;/span&gt;    &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$leftover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$leftover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@else&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/1ed9ccf7a937494141ab&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With just an additional parameter, we can handle this extra case. Now height-based elements will not break the flow of vertical rhythm.&lt;/p&gt;

&lt;p&gt;One thing I want to note is that you must be careful not to become too obsessed by implementing strict vertical rhythm. There are potential edge cases you might come across, and going down the rabbit hole of vertical rhythm is quite overwhelming (trust me). While vertical rhythm can greatly improve the look, feel, and readability of a layout, being off by a few pixels here and there will not be noticable to anyone, but you, and probably only if you are using debug lines.&lt;/p&gt;

&lt;p&gt;Some common edge cases you may come across are borders and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin_collapsing&quot;&gt;margin collapsing&lt;/a&gt;. You can easily solve for borders by adding an additional parameter that accounts for the pixels being used in the height (this won&amp;#39;t affect height-based elements using the border-box model). Collapsing margins can be fixed by adding 1px of vertical padding and accounting for that extra pixel in the vertical rhythm.&lt;/p&gt;

&lt;p&gt;Here is the vertical rhythm mixin I currently use on this site. Notice that I have added the &lt;code&gt;$bottom-rows&lt;/code&gt; and &lt;code&gt;$top-rows&lt;/code&gt; parameters to allow the specification of additional base-line rows above and below the element. I use 1 row below by default to get the flow I want between elements.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;k&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vertical-rhythm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bottom-rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$top-rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$use-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// I use a rem function that enables me to pass in the $font-size and $border
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// as rems or px, and the result of the function will give me rems
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// check if height-based element
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// if so use height property for height, otherwise use line-height property
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;@if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$use-height&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$leftover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$top-rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$leftover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bottom-rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$leftover&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@else&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;based&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;$font-size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$multiplier&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$top-rows&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$line-height-base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$bottom-rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$border&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://sassmeister.com/gist/9e4a757c63f467677bbe&quot;&gt;Play with this example in Sassmeister&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may wonder why we are using rems for everything. Try resizing this window. Notice that the text scales (a benefit of specifying sizes in rems), but the vertical rhythm remains intact. This is the benefit of using rems! Now we can adjust our base-font size on the html element and everything will scale up/down while preserving the vertical rhythm.&lt;/p&gt;

&lt;p&gt;I encourage you to take this mixin and use it to begin applying vertical rhythm to your sites.&lt;/p&gt;

&lt;p&gt;Other great resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.8thlight.com/chris-peak/2012/12/30/vertical-rhythm.html&quot;&gt;Vertical Rhythm in Typography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://typecast.com/blog/4-simple-steps-to-vertical-rhythm&quot;&gt;4 Simple STeps to Vertical Rhythm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/06/09/groove-to-a-vertical-rhythm/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/06/09/groove-to-a-vertical-rhythm/</guid>
      </item>
    
      <item>
        <title>Setup Varnish Locally</title>
        <description>&lt;p&gt;Typically, the best way to ensure that a web application will run correctly in production is to stage it an environment just like production. Most of the time the overhead of setting up caching or other performance improvements is not necessary in development, but there are instances when the development being done directly interacts with or relies upon these components. In these situations it often pays off to take the time to set up &amp;quot;production components&amp;quot; so that changes can be tested prior to pushing changes to a staging or production environment, often a costly extra step.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Today, I am going to focus on setting up &lt;a href=&quot;https://www.varnish-cache.org&quot;&gt;Varnish Cache&lt;/a&gt;, a &amp;quot;caching HTTP reverse proxy&amp;quot;. Varnish allows you to cache responses to quickly serve common pages and provides powerful configuration for response headers and other cache settings.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;If you are using Mac OSX, you can simply use &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; to install Varnish.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install varnish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using vanilla Varnish without any other modules, you can skip ahead to the &lt;a href=&quot;#usage&quot;&gt;usage&lt;/a&gt; section. If you do not use brew, continue to follow along and we will install it from source.&lt;/p&gt;

&lt;h2 id=&quot;installing-modules&quot;&gt;Installing Modules&lt;/h2&gt;

&lt;p&gt;Installing Varnish modules such as &lt;a href=&quot;https://github.com/varnish/libvmod-header&quot;&gt;libvmod-header&lt;/a&gt; or &lt;a href=&quot;https://github.com/lkarsten/libvmod-cookie&quot;&gt;libvmod-cookie&lt;/a&gt; requires building them from source using Varnish&amp;#39;s source.&lt;/p&gt;

&lt;p&gt;First we must build Varnish&amp;#39;s source. Download a Varnish from their website or &lt;a href=&quot;https://github.com/varnish/Varnish-Cache&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /varnish-cache-source-location
./autogen.sh
./configure
make

&lt;span class=&quot;c&quot;&gt;# install varnish without brew (optional)&lt;/span&gt;
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; If you get an rst2man error during compilation you need to &lt;a href=&quot;http://stackoverflow.com/a/12813081&quot;&gt;install docutils with pip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have built Varnish, we can use it to build our modules. For each module do as follows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /varnish-module-location
./autogen.sh
./configure &lt;span class=&quot;nv&quot;&gt;VARNISHSRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path-to-varnish-source
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install the module binaries to the correct location, allowing you to import the module in your vcls. You can now configure &lt;code&gt;default.vcl&lt;/code&gt; to your liking. It is located at &lt;code&gt;/user/local/etc/varnish&lt;/code&gt; on OSX.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;If you installed Varnish via brew, you can use &lt;code&gt;launchctl&lt;/code&gt; and the &lt;code&gt;plist&lt;/code&gt; files to load the service, or you can use the &lt;code&gt;varnishd&lt;/code&gt; command via the terminal. I recommend using the terminal initially because this will allow you to see and debug any errors. The property list files will fail silently if there are any errors.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# must run as root&lt;/span&gt;
sudo varnishd -f /usr/local/etc/varnish/default.vcl -s file -a 0.0.0.0:8000
&lt;span class=&quot;c&quot;&gt;# help: see available arguments with descriptions&lt;/span&gt;
varnishd -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Command Breakdown&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; Specifies the location of the &lt;code&gt;vcl&lt;/code&gt; script to launch Varnish with.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; Specifies storage options. The file argument stores in &lt;code&gt;/tmp&lt;/code&gt; by default. You can specify another location with &lt;code&gt;-s file,/location&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt; Specifies the address and port that Varnish will run at. You can access your website through Varnish using this address and port.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By now you should be up and running with Varnish locally on your development environment. For more information on Varnish in general and writing vcl scripts, consult the &lt;a href=&quot;https://www.varnish-cache.org/docs&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 May 2014 00:00:00 -0400</pubDate>
        <link>http://inlehmansterms.net/2014/05/26/setup-varnish-locally/</link>
        <guid isPermaLink="true">http://inlehmansterms.net/2014/05/26/setup-varnish-locally/</guid>
      </item>
    
  </channel>
</rss>
